2025-02-26 14:47:04 - 
=== PROJECT STATEMENT ===
2025-02-26 14:47:04 - ---
description: About this project
globs: 
alwaysApply: false
---
# About this project

`twat-search` is a multi-provider search 

## Development Notes
- Uses `uv` for Python package management
- Quality tools: ruff, mypy, pytest
- Clear provider protocol for adding new search backends
- Strong typing and runtime checks throughout

2025-02-26 14:47:04 - 
=== Current Status ===
2025-02-26 14:47:04 - Error: LOG.md is missing
2025-02-26 14:47:04 - [1.0K]  .
├── [  64]  .benchmarks
├── [  96]  .cursor
│   └── [ 192]  rules
│       ├── [ 334]  0project.mdc
│       ├── [ 558]  cleanup.mdc
│       └── [5.7K]  filetree.mdc
├── [  96]  .github
│   └── [ 128]  workflows
│       ├── [2.7K]  push.yml
│       └── [1.4K]  release.yml
├── [3.5K]  .gitignore
├── [1.5K]  .pre-commit-config.yaml
├── [ 128]  .specstory
│   ├── [ 992]  history
│   │   ├── [2.0K]  .what-is-this.md
│   │   ├── [ 52K]  2025-02-25_01-58-creating-and-tracking-project-tasks.md
│   │   ├── [7.4K]  2025-02-25_02-17-project-task-continuation-and-progress-update.md
│   │   ├── [ 11K]  2025-02-25_02-24-planning-tests-for-twat-search-web-package.md
│   │   ├── [196K]  2025-02-25_02-27-implementing-tests-for-twat-search-package.md
│   │   ├── [ 46K]  2025-02-25_02-58-transforming-python-script-into-cli-tool.md
│   │   ├── [ 93K]  2025-02-25_03-09-generating-a-name-for-the-chat.md
│   │   ├── [5.5K]  2025-02-25_03-33-untitled.md
│   │   ├── [ 57K]  2025-02-25_03-54-integrating-search-engines-into-twat-search.md
│   │   ├── [ 72K]  2025-02-25_04-05-consolidating-you-py-and-youcom-py.md
│   │   ├── [6.1K]  2025-02-25_04-13-missing-env-api-key-names-in-pplx-py.md
│   │   ├── [118K]  2025-02-25_04-16-implementing-functions-for-brave-search-engines.md
│   │   ├── [286K]  2025-02-25_04-48-unifying-search-engine-parameters-in-twat-search.md
│   │   ├── [ 83K]  2025-02-25_05-36-implementing-duckduckgo-search-engine.md
│   │   ├── [194K]  2025-02-25_05-43-implementing-the-webscout-search-engine.md
│   │   ├── [ 23K]  2025-02-25_06-07-implementing-bing-scraper-engine.md
│   │   ├── [ 15K]  2025-02-25_06-12-continuing-bing-scraper-engine-implementation.md
│   │   ├── [121K]  2025-02-25_06-34-implementing-safe-import-patterns-in-modules.md
│   │   ├── [9.9K]  2025-02-25_07-09-refactoring-plan-and-progress-update.md
│   │   ├── [ 40K]  2025-02-25_07-17-implementing-phase-1-from-todo-md.md
│   │   ├── [292K]  2025-02-25_07-34-integrating-hasdata-google-serp-apis.md
│   │   ├── [142K]  2025-02-25_08-19-implementing-search-engines-from-nextengines-md.md
│   │   ├── [175K]  2025-02-26_09-54-implementing-plain-option-for-search-commands.md
│   │   ├── [264K]  2025-02-26_10-55-standardizing-engine-naming-conventions.md
│   │   ├── [4.3K]  2025-02-26_11-30-untitled.md
│   │   ├── [102K]  2025-02-26_12-11-update-config-py-to-use-engine-constants.md
│   │   ├── [278K]  2025-02-26_12-18-update-engine-imports-and-exports-in-init-py.md
│   │   ├── [268K]  2025-02-26_13-40-search-engine-initialization-errors.md
│   │   └── [ 54K]  2025-02-26_14-15-untitled.md
│   └── [2.2M]  history.txt
├── [3.2K]  CHANGELOG.md
├── [ 499]  CLEANUP.txt
├── [1.0K]  LICENSE
├── [ 30K]  NEXTENGINES.md
├── [1.2K]  PROGRESS.md
├── [ 21K]  README.md
├── [5.0K]  TODO.md
├── [   7]  VERSION.txt
├── [ 12K]  cleanup.py
├── [ 192]  dist
├── [1.5K]  fix_name_attribute.py
├── [ 10K]  pyproject.toml
├── [ 128]  src
│   └── [ 256]  twat_search
│       ├── [ 577]  __init__.py
│       ├── [2.4K]  __main__.py
│       └── [ 416]  web
│           ├── [1.7K]  __init__.py
│           ├── [5.8K]  api.py
│           ├── [ 45K]  cli.py
│           ├── [ 13K]  config.py
│           ├── [2.6K]  engine_constants.py
│           ├── [ 576]  engines
│           │   ├── [8.5K]  __init__.py
│           │   ├── [ 25K]  anywebsearch.py
│           │   ├── [4.4K]  base.py
│           │   ├── [ 11K]  bing_scraper.py
│           │   ├── [7.9K]  brave.py
│           │   ├── [8.5K]  critique.py
│           │   ├── [6.9K]  duckduckgo.py
│           │   ├── [ 12K]  google_scraper.py
│           │   ├── [7.5K]  hasdata.py
│           │   ├── [5.1K]  pplx.py
│           │   ├── [ 26K]  searchit.py
│           │   ├── [7.2K]  serpapi.py
│           │   ├── [7.6K]  tavily.py
│           │   └── [7.5K]  you.py
│           ├── [1.0K]  exceptions.py
│           ├── [1.3K]  models.py
│           └── [1.5K]  utils.py
├── [ 256]  tests
│   ├── [  64]  .benchmarks
│   ├── [2.0K]  conftest.py
│   ├── [ 157]  test_twat_search.py
│   ├── [ 192]  unit
│   │   ├── [  42]  __init__.py
│   │   ├── [1.5K]  mock_engine.py
│   │   └── [ 320]  web
│   │       ├── [  46]  __init__.py
│   │       ├── [ 160]  engines
│   │       │   ├── [  37]  __init__.py
│   │       │   └── [4.3K]  test_base.py
│   │       ├── [5.1K]  test_api.py
│   │       ├── [2.7K]  test_config.py
│   │       ├── [2.0K]  test_exceptions.py
│   │       ├── [4.5K]  test_models.py
│   │       └── [3.5K]  test_utils.py
│   └── [ 160]  web
│       └── [ 10K]  test_bing_scraper.py
├── [158K]  twat_search.txt
└── [267K]  uv.lock

19 directories, 87 files

2025-02-26 14:47:04 - 
Project structure:
2025-02-26 14:47:04 - [1.0K]  .
├── [  64]  .benchmarks
├── [  96]  .cursor
│   └── [ 192]  rules
│       ├── [ 334]  0project.mdc
│       ├── [ 558]  cleanup.mdc
│       └── [5.7K]  filetree.mdc
├── [  96]  .github
│   └── [ 128]  workflows
│       ├── [2.7K]  push.yml
│       └── [1.4K]  release.yml
├── [3.5K]  .gitignore
├── [1.5K]  .pre-commit-config.yaml
├── [ 128]  .specstory
│   ├── [ 992]  history
│   │   ├── [2.0K]  .what-is-this.md
│   │   ├── [ 52K]  2025-02-25_01-58-creating-and-tracking-project-tasks.md
│   │   ├── [7.4K]  2025-02-25_02-17-project-task-continuation-and-progress-update.md
│   │   ├── [ 11K]  2025-02-25_02-24-planning-tests-for-twat-search-web-package.md
│   │   ├── [196K]  2025-02-25_02-27-implementing-tests-for-twat-search-package.md
│   │   ├── [ 46K]  2025-02-25_02-58-transforming-python-script-into-cli-tool.md
│   │   ├── [ 93K]  2025-02-25_03-09-generating-a-name-for-the-chat.md
│   │   ├── [5.5K]  2025-02-25_03-33-untitled.md
│   │   ├── [ 57K]  2025-02-25_03-54-integrating-search-engines-into-twat-search.md
│   │   ├── [ 72K]  2025-02-25_04-05-consolidating-you-py-and-youcom-py.md
│   │   ├── [6.1K]  2025-02-25_04-13-missing-env-api-key-names-in-pplx-py.md
│   │   ├── [118K]  2025-02-25_04-16-implementing-functions-for-brave-search-engines.md
│   │   ├── [286K]  2025-02-25_04-48-unifying-search-engine-parameters-in-twat-search.md
│   │   ├── [ 83K]  2025-02-25_05-36-implementing-duckduckgo-search-engine.md
│   │   ├── [194K]  2025-02-25_05-43-implementing-the-webscout-search-engine.md
│   │   ├── [ 23K]  2025-02-25_06-07-implementing-bing-scraper-engine.md
│   │   ├── [ 15K]  2025-02-25_06-12-continuing-bing-scraper-engine-implementation.md
│   │   ├── [121K]  2025-02-25_06-34-implementing-safe-import-patterns-in-modules.md
│   │   ├── [9.9K]  2025-02-25_07-09-refactoring-plan-and-progress-update.md
│   │   ├── [ 40K]  2025-02-25_07-17-implementing-phase-1-from-todo-md.md
│   │   ├── [292K]  2025-02-25_07-34-integrating-hasdata-google-serp-apis.md
│   │   ├── [142K]  2025-02-25_08-19-implementing-search-engines-from-nextengines-md.md
│   │   ├── [175K]  2025-02-26_09-54-implementing-plain-option-for-search-commands.md
│   │   ├── [264K]  2025-02-26_10-55-standardizing-engine-naming-conventions.md
│   │   ├── [4.3K]  2025-02-26_11-30-untitled.md
│   │   ├── [102K]  2025-02-26_12-11-update-config-py-to-use-engine-constants.md
│   │   ├── [278K]  2025-02-26_12-18-update-engine-imports-and-exports-in-init-py.md
│   │   ├── [268K]  2025-02-26_13-40-search-engine-initialization-errors.md
│   │   └── [ 54K]  2025-02-26_14-15-untitled.md
│   └── [2.2M]  history.txt
├── [3.2K]  CHANGELOG.md
├── [ 499]  CLEANUP.txt
├── [1.0K]  LICENSE
├── [ 30K]  NEXTENGINES.md
├── [1.2K]  PROGRESS.md
├── [ 21K]  README.md
├── [5.0K]  TODO.md
├── [   7]  VERSION.txt
├── [ 12K]  cleanup.py
├── [ 192]  dist
├── [1.5K]  fix_name_attribute.py
├── [ 10K]  pyproject.toml
├── [ 128]  src
│   └── [ 256]  twat_search
│       ├── [ 577]  __init__.py
│       ├── [2.4K]  __main__.py
│       └── [ 416]  web
│           ├── [1.7K]  __init__.py
│           ├── [5.8K]  api.py
│           ├── [ 45K]  cli.py
│           ├── [ 13K]  config.py
│           ├── [2.6K]  engine_constants.py
│           ├── [ 576]  engines
│           │   ├── [8.5K]  __init__.py
│           │   ├── [ 25K]  anywebsearch.py
│           │   ├── [4.4K]  base.py
│           │   ├── [ 11K]  bing_scraper.py
│           │   ├── [7.9K]  brave.py
│           │   ├── [8.5K]  critique.py
│           │   ├── [6.9K]  duckduckgo.py
│           │   ├── [ 12K]  google_scraper.py
│           │   ├── [7.5K]  hasdata.py
│           │   ├── [5.1K]  pplx.py
│           │   ├── [ 26K]  searchit.py
│           │   ├── [7.2K]  serpapi.py
│           │   ├── [7.6K]  tavily.py
│           │   └── [7.5K]  you.py
│           ├── [1.0K]  exceptions.py
│           ├── [1.3K]  models.py
│           └── [1.5K]  utils.py
├── [ 256]  tests
│   ├── [  64]  .benchmarks
│   ├── [2.0K]  conftest.py
│   ├── [ 157]  test_twat_search.py
│   ├── [ 192]  unit
│   │   ├── [  42]  __init__.py
│   │   ├── [1.5K]  mock_engine.py
│   │   └── [ 320]  web
│   │       ├── [  46]  __init__.py
│   │       ├── [ 160]  engines
│   │       │   ├── [  37]  __init__.py
│   │       │   └── [4.3K]  test_base.py
│   │       ├── [5.1K]  test_api.py
│   │       ├── [2.7K]  test_config.py
│   │       ├── [2.0K]  test_exceptions.py
│   │       ├── [4.5K]  test_models.py
│   │       └── [3.5K]  test_utils.py
│   └── [ 160]  web
│       └── [ 10K]  test_bing_scraper.py
├── [158K]  twat_search.txt
└── [267K]  uv.lock

19 directories, 87 files

2025-02-26 14:47:04 - On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .cursor/rules/filetree.mdc
	modified:   .specstory/history/2025-02-26_12-18-update-engine-imports-and-exports-in-init-py.md
	modified:   CLEANUP.txt
	modified:   TODO.md
	modified:   cleanup.py
	modified:   src/twat_search/web/cli.py
	modified:   src/twat_search/web/config.py
	modified:   src/twat_search/web/engines/__init__.py
	modified:   src/twat_search/web/engines/anywebsearch.py
	modified:   src/twat_search/web/engines/base.py
	modified:   src/twat_search/web/engines/critique.py
	modified:   src/twat_search/web/engines/duckduckgo.py
	modified:   src/twat_search/web/engines/google_scraper.py
	modified:   src/twat_search/web/engines/hasdata.py
	modified:   src/twat_search/web/engines/pplx.py
	modified:   src/twat_search/web/engines/searchit.py
	modified:   src/twat_search/web/engines/serpapi.py
	modified:   src/twat_search/web/engines/tavily.py
	modified:   tests/unit/web/engines/test_base.py
	modified:   twat_search.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	.specstory/history/2025-02-26_13-40-search-engine-initialization-errors.md
	.specstory/history/2025-02-26_14-15-untitled.md
	fix_name_attribute.py

no changes added to commit (use "git add" and/or "git commit -a")

2025-02-26 14:47:04 - On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .cursor/rules/filetree.mdc
	modified:   .specstory/history/2025-02-26_12-18-update-engine-imports-and-exports-in-init-py.md
	modified:   CLEANUP.txt
	modified:   TODO.md
	modified:   cleanup.py
	modified:   src/twat_search/web/cli.py
	modified:   src/twat_search/web/config.py
	modified:   src/twat_search/web/engines/__init__.py
	modified:   src/twat_search/web/engines/anywebsearch.py
	modified:   src/twat_search/web/engines/base.py
	modified:   src/twat_search/web/engines/critique.py
	modified:   src/twat_search/web/engines/duckduckgo.py
	modified:   src/twat_search/web/engines/google_scraper.py
	modified:   src/twat_search/web/engines/hasdata.py
	modified:   src/twat_search/web/engines/pplx.py
	modified:   src/twat_search/web/engines/searchit.py
	modified:   src/twat_search/web/engines/serpapi.py
	modified:   src/twat_search/web/engines/tavily.py
	modified:   tests/unit/web/engines/test_base.py
	modified:   twat_search.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	.specstory/history/2025-02-26_13-40-search-engine-initialization-errors.md
	.specstory/history/2025-02-26_14-15-untitled.md
	fix_name_attribute.py

no changes added to commit (use "git add" and/or "git commit -a")

2025-02-26 14:47:04 - 
=== Environment Status ===
2025-02-26 14:47:04 - Setting up virtual environment
2025-02-26 14:47:05 - Virtual environment created and activated
2025-02-26 14:47:05 - Installing package with all extras
2025-02-26 14:47:05 - Setting up virtual environment
2025-02-26 14:47:05 - Virtual environment created and activated
2025-02-26 14:47:06 - Package installed successfully
2025-02-26 14:47:06 - Running code quality checks
2025-02-26 14:47:06 - >>> Running code fixes...
2025-02-26 14:47:06 - src/twat_search/__init__.py:22:29: F401 `twat_search.web` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
20 | # Import submodules if available
21 | try:
22 |     from twat_search import web
   |                             ^^^ F401
23 |
24 |     __all__.append("web")
   |
   = help: Remove unused import: `twat_search.web`

src/twat_search/web/__init__.py:20:37: F401 `twat_search.web.api.search` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
18 | # Import core functionality first
19 | try:
20 |     from twat_search.web.api import search
   |                                     ^^^^^^ F401
21 |     from twat_search.web.config import Config, EngineConfig
22 |     from twat_search.web.models import SearchResult
   |
   = help: Remove unused import: `twat_search.web.api.search`

src/twat_search/web/__init__.py:21:40: F401 `twat_search.web.config.Config` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
19 | try:
20 |     from twat_search.web.api import search
21 |     from twat_search.web.config import Config, EngineConfig
   |                                        ^^^^^^ F401
22 |     from twat_search.web.models import SearchResult
   |
   = help: Remove unused import

src/twat_search/web/__init__.py:21:48: F401 `twat_search.web.config.EngineConfig` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
19 | try:
20 |     from twat_search.web.api import search
21 |     from twat_search.web.config import Config, EngineConfig
   |                                                ^^^^^^^^^^^^ F401
22 |     from twat_search.web.models import SearchResult
   |
   = help: Remove unused import

src/twat_search/web/__init__.py:22:40: F401 `twat_search.web.models.SearchResult` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
20 |     from twat_search.web.api import search
21 |     from twat_search.web.config import Config, EngineConfig
22 |     from twat_search.web.models import SearchResult
   |                                        ^^^^^^^^^^^^ F401
23 |
24 |     __all__.extend(["Config", "EngineConfig", "SearchResult", "search"])
   |
   = help: Remove unused import: `twat_search.web.models.SearchResult`

src/twat_search/web/__init__.py:30:41: F401 `twat_search.web.engines.brave` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
28 | # Import search engines with try-except blocks to handle optional dependencies
29 | try:
30 |     from twat_search.web.engines import brave, brave_news
   |                                         ^^^^^ F401
31 |
32 |     __all__.extend(["brave", "brave_news"])
   |
   = help: Remove unused import

src/twat_search/web/__init__.py:30:48: F401 `twat_search.web.engines.brave_news` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
28 | # Import search engines with try-except blocks to handle optional dependencies
29 | try:
30 |     from twat_search.web.engines import brave, brave_news
   |                                                ^^^^^^^^^^ F401
31 |
32 |     __all__.extend(["brave", "brave_news"])
   |
   = help: Remove unused import

src/twat_search/web/__init__.py:37:41: F401 `twat_search.web.engines.pplx` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
36 | try:
37 |     from twat_search.web.engines import pplx
   |                                         ^^^^ F401
38 |
39 |     __all__.extend(["pplx"])
   |
   = help: Remove unused import: `twat_search.web.engines.pplx`

src/twat_search/web/__init__.py:44:41: F401 `twat_search.web.engines.serpapi` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
43 | try:
44 |     from twat_search.web.engines import serpapi
   |                                         ^^^^^^^ F401
45 |
46 |     __all__.extend(["serpapi"])
   |
   = help: Remove unused import: `twat_search.web.engines.serpapi`

src/twat_search/web/__init__.py:51:41: F401 `twat_search.web.engines.tavily` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
50 | try:
51 |     from twat_search.web.engines import tavily
   |                                         ^^^^^^ F401
52 |
53 |     __all__.extend(["tavily"])
   |
   = help: Remove unused import: `twat_search.web.engines.tavily`

src/twat_search/web/__init__.py:58:41: F401 `twat_search.web.engines.you` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
57 | try:
58 |     from twat_search.web.engines import you, you_news
   |                                         ^^^ F401
59 |
60 |     __all__.extend(["you", "you_news"])
   |
   = help: Remove unused import

src/twat_search/web/__init__.py:58:46: F401 `twat_search.web.engines.you_news` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
57 | try:
58 |     from twat_search.web.engines import you, you_news
   |                                              ^^^^^^^^ F401
59 |
60 |     __all__.extend(["you", "you_news"])
   |
   = help: Remove unused import

src/twat_search/web/__init__.py:65:41: F401 `twat_search.web.engines.critique` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
64 | try:
65 |     from twat_search.web.engines import critique
   |                                         ^^^^^^^^ F401
66 |
67 |     __all__.extend(["critique"])
   |
   = help: Remove unused import: `twat_search.web.engines.critique`

src/twat_search/web/__init__.py:72:41: F401 `twat_search.web.engines.duckduckgo` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
71 | try:
72 |     from twat_search.web.engines import duckduckgo
   |                                         ^^^^^^^^^^ F401
73 |
74 |     __all__.extend(["duckduckgo"])
   |
   = help: Remove unused import: `twat_search.web.engines.duckduckgo`

src/twat_search/web/__init__.py:79:41: F401 `twat_search.web.engines.bing_scraper` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
78 | try:
79 |     from twat_search.web.engines import bing_scraper
   |                                         ^^^^^^^^^^^^ F401
80 |
81 |     __all__.extend(["bing_scraper"])
   |
   = help: Remove unused import: `twat_search.web.engines.bing_scraper`

src/twat_search/web/api.py:45:5: PLR0913 Too many arguments in function definition (6 > 5)
   |
45 | def init_engine_task(
   |     ^^^^^^^^^^^^^^^^ PLR0913
46 |     engine_name: str,
47 |     config: Config,
   |

src/twat_search/web/api.py:86:11: PLR0913 Too many arguments in function definition (8 > 5)
   |
86 | async def search(
   |           ^^^^^^ PLR0913
87 |     query: str,
88 |     engines: list[str] | None = None,
   |

src/twat_search/web/api.py:92:5: FBT001 Boolean-typed positional argument in function definition
   |
90 |     country: str | None = None,
91 |     language: str | None = None,
92 |     safe_search: bool = True,
   |     ^^^^^^^^^^^ FBT001
93 |     time_frame: str | None = None,
94 |     config: Optional["Config"] = None,
   |

src/twat_search/web/api.py:92:5: FBT002 Boolean default positional argument in function definition
   |
90 |     country: str | None = None,
91 |     language: str | None = None,
92 |     safe_search: bool = True,
   |     ^^^^^^^^^^^ FBT002
93 |     time_frame: str | None = None,
94 |     config: Optional["Config"] = None,
   |

src/twat_search/web/cli.py:81:34: FBT001 Boolean-typed positional argument in function definition
   |
79 |             )
80 |
81 |     def _configure_logging(self, verbose: bool = False) -> None:
   |                                  ^^^^^^^ FBT001
82 |         """Configure the logging level based on the verbose flag."""
83 |         # When not in verbose mode, silence almost all logs
   |

src/twat_search/web/cli.py:81:34: FBT002 Boolean default positional argument in function definition
   |
79 |             )
80 |
81 |     def _configure_logging(self, verbose: bool = False) -> None:
   |                                  ^^^^^^^ FBT002
82 |         """Configure the logging level based on the verbose flag."""
83 |         # When not in verbose mode, silence almost all logs
   |

src/twat_search/web/cli.py:102:9: PLR0911 Too many return statements (7 > 6)
    |
100 |         logging.getLogger("httpx").setLevel(level)
101 |
102 |     def _parse_engines(self, engines_arg: Any) -> list[str] | None:
    |         ^^^^^^^^^^^^^^ PLR0911
103 |         """Parse the engines argument into a list of engine names.
    |

src/twat_search/web/cli.py:216:50: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
214 |                         "title": result.title,
215 |                         "snippet": result.snippet[:100] + "..."
216 |                         if len(result.snippet) > 100
    |                                                  ^^^ PLR2004
217 |                         else result.snippet,
218 |                         "raw_result": getattr(result, "raw", None),
    |

src/twat_search/web/cli.py:224:9: C901 `_display_results` is too complex (14 > 10)
    |
222 |         return processed
223 |
224 |     def _display_results(
    |         ^^^^^^^^^^^^^^^^ C901
225 |         self,
226 |         processed_results: list[dict[str, Any]],
    |

src/twat_search/web/cli.py:224:9: PLR0912 Too many branches (14 > 12)
    |
222 |         return processed
223 |
224 |     def _display_results(
    |         ^^^^^^^^^^^^^^^^ PLR0912
225 |         self,
226 |         processed_results: list[dict[str, Any]],
    |

src/twat_search/web/cli.py:227:9: FBT001 Boolean-typed positional argument in function definition
    |
225 |         self,
226 |         processed_results: list[dict[str, Any]],
227 |         verbose: bool = False,
    |         ^^^^^^^ FBT001
228 |         plain: bool = False,
229 |     ) -> None:
    |

src/twat_search/web/cli.py:227:9: FBT002 Boolean default positional argument in function definition
    |
225 |         self,
226 |         processed_results: list[dict[str, Any]],
227 |         verbose: bool = False,
    |         ^^^^^^^ FBT002
228 |         plain: bool = False,
229 |     ) -> None:
    |

src/twat_search/web/cli.py:228:9: FBT001 Boolean-typed positional argument in function definition
    |
226 |         processed_results: list[dict[str, Any]],
227 |         verbose: bool = False,
228 |         plain: bool = False,
    |         ^^^^^ FBT001
229 |     ) -> None:
230 |         if not processed_results:
    |

src/twat_search/web/cli.py:228:9: FBT002 Boolean default positional argument in function definition
    |
226 |         processed_results: list[dict[str, Any]],
227 |         verbose: bool = False,
228 |         plain: bool = False,
    |         ^^^^^ FBT002
229 |     ) -> None:
230 |         if not processed_results:
    |

src/twat_search/web/cli.py:315:15: PLR0913 Too many arguments in function definition (6 > 5)
    |
313 |         console.print(table)
314 |
315 |     async def _search_engine(
    |               ^^^^^^^^^^^^^^ PLR0913
316 |         self,
317 |         engine: str,
    |

src/twat_search/web/cli.py:320:9: FBT001 Boolean-typed positional argument in function definition
    |
318 |         query: str,
319 |         params: dict,
320 |         json: bool,
    |         ^^^^ FBT001
321 |         verbose: bool,
322 |         plain: bool = False,
    |

src/twat_search/web/cli.py:321:9: FBT001 Boolean-typed positional argument in function definition
    |
319 |         params: dict,
320 |         json: bool,
321 |         verbose: bool,
    |         ^^^^^^^ FBT001
322 |         plain: bool = False,
323 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:322:9: FBT001 Boolean-typed positional argument in function definition
    |
320 |         json: bool,
321 |         verbose: bool,
322 |         plain: bool = False,
    |         ^^^^^ FBT001
323 |     ) -> list[dict[str, Any]]:
324 |         """
    |

src/twat_search/web/cli.py:322:9: FBT002 Boolean default positional argument in function definition
    |
320 |         json: bool,
321 |         verbose: bool,
322 |         plain: bool = False,
    |         ^^^^^ FBT002
323 |     ) -> list[dict[str, Any]]:
324 |         """
    |

src/twat_search/web/cli.py:383:9: PLR0913 Too many arguments in function definition (12 > 5)
    |
381 |             return []
382 |
383 |     def q(
    |         ^ PLR0913
384 |         self,
385 |         query: str,
    |

src/twat_search/web/cli.py:392:9: FBT001 Boolean-typed positional argument in function definition
    |
390 |         country: str | None = None,
391 |         language: str | None = None,
392 |         safe_search: bool = True,
    |         ^^^^^^^^^^^ FBT001
393 |         time_frame: str | None = None,
394 |         verbose: bool = False,
    |

src/twat_search/web/cli.py:392:9: FBT002 Boolean default positional argument in function definition
    |
390 |         country: str | None = None,
391 |         language: str | None = None,
392 |         safe_search: bool = True,
    |         ^^^^^^^^^^^ FBT002
393 |         time_frame: str | None = None,
394 |         verbose: bool = False,
    |

src/twat_search/web/cli.py:394:9: FBT001 Boolean-typed positional argument in function definition
    |
392 |         safe_search: bool = True,
393 |         time_frame: str | None = None,
394 |         verbose: bool = False,
    |         ^^^^^^^ FBT001
395 |         json: bool = False,
396 |         plain: bool = False,
    |

src/twat_search/web/cli.py:394:9: FBT002 Boolean default positional argument in function definition
    |
392 |         safe_search: bool = True,
393 |         time_frame: str | None = None,
394 |         verbose: bool = False,
    |         ^^^^^^^ FBT002
395 |         json: bool = False,
396 |         plain: bool = False,
    |

src/twat_search/web/cli.py:395:9: FBT001 Boolean-typed positional argument in function definition
    |
393 |         time_frame: str | None = None,
394 |         verbose: bool = False,
395 |         json: bool = False,
    |         ^^^^ FBT001
396 |         plain: bool = False,
397 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:395:9: FBT002 Boolean default positional argument in function definition
    |
393 |         time_frame: str | None = None,
394 |         verbose: bool = False,
395 |         json: bool = False,
    |         ^^^^ FBT002
396 |         plain: bool = False,
397 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:396:9: FBT001 Boolean-typed positional argument in function definition
    |
394 |         verbose: bool = False,
395 |         json: bool = False,
396 |         plain: bool = False,
    |         ^^^^^ FBT001
397 |         **kwargs: Any,
398 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:396:9: FBT002 Boolean default positional argument in function definition
    |
394 |         verbose: bool = False,
395 |         json: bool = False,
396 |         plain: bool = False,
    |         ^^^^^ FBT002
397 |         **kwargs: Any,
398 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:472:42: FBT001 Boolean-typed positional argument in function definition
    |
471 |     def info(
472 |         self, engine: str | None = None, json: bool = False, plain: bool = False
    |                                          ^^^^ FBT001
473 |     ) -> None:
474 |         """
    |

src/twat_search/web/cli.py:472:42: FBT002 Boolean default positional argument in function definition
    |
471 |     def info(
472 |         self, engine: str | None = None, json: bool = False, plain: bool = False
    |                                          ^^^^ FBT002
473 |     ) -> None:
474 |         """
    |

src/twat_search/web/cli.py:472:62: FBT001 Boolean-typed positional argument in function definition
    |
471 |     def info(
472 |         self, engine: str | None = None, json: bool = False, plain: bool = False
    |                                                              ^^^^^ FBT001
473 |     ) -> None:
474 |         """
    |

src/twat_search/web/cli.py:472:62: FBT002 Boolean default positional argument in function definition
    |
471 |     def info(
472 |         self, engine: str | None = None, json: bool = False, plain: bool = False
    |                                                              ^^^^^ FBT002
473 |     ) -> None:
474 |         """
    |

src/twat_search/web/cli.py:547:9: C901 `_show_engine_details` is too complex (11 > 10)
    |
545 |         )
546 |
547 |     def _show_engine_details(self, engine_name: str, config: "Config") -> None:
    |         ^^^^^^^^^^^^^^^^^^^^ C901
548 |         if engine_name not in config.engines:
549 |             self.console.print(
    |

src/twat_search/web/cli.py:688:15: PLR0913 Too many arguments in function definition (14 > 5)
    |
686 |         return is_engine_available(engine_name)
687 |
688 |     async def critique(
    |               ^^^^^^^^ PLR0913
689 |         self,
690 |         query: str,
    |

src/twat_search/web/cli.py:694:9: FBT002 Boolean default positional argument in function definition
    |
692 |         country: str | None = None,
693 |         language: str | None = None,
694 |         safe_search: bool | None = True,
    |         ^^^^^^^^^^^ FBT002
695 |         time_frame: str | None = None,
696 |         image_url: str | None = None,
    |

src/twat_search/web/cli.py:701:9: FBT001 Boolean-typed positional argument in function definition
    |
699 |         source_blacklist: str | None = None,
700 |         api_key: str | None = None,
701 |         verbose: bool = False,
    |         ^^^^^^^ FBT001
702 |         json: bool = False,
703 |         plain: bool = False,
    |

src/twat_search/web/cli.py:701:9: FBT002 Boolean default positional argument in function definition
    |
699 |         source_blacklist: str | None = None,
700 |         api_key: str | None = None,
701 |         verbose: bool = False,
    |         ^^^^^^^ FBT002
702 |         json: bool = False,
703 |         plain: bool = False,
    |

src/twat_search/web/cli.py:702:9: FBT001 Boolean-typed positional argument in function definition
    |
700 |         api_key: str | None = None,
701 |         verbose: bool = False,
702 |         json: bool = False,
    |         ^^^^ FBT001
703 |         plain: bool = False,
704 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:702:9: FBT002 Boolean default positional argument in function definition
    |
700 |         api_key: str | None = None,
701 |         verbose: bool = False,
702 |         json: bool = False,
    |         ^^^^ FBT002
703 |         plain: bool = False,
704 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:703:9: FBT001 Boolean-typed positional argument in function definition
    |
701 |         verbose: bool = False,
702 |         json: bool = False,
703 |         plain: bool = False,
    |         ^^^^^ FBT001
704 |         **kwargs: Any,
705 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:703:9: FBT002 Boolean default positional argument in function definition
    |
701 |         verbose: bool = False,
702 |         json: bool = False,
703 |         plain: bool = False,
    |         ^^^^^ FBT002
704 |         **kwargs: Any,
705 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:762:15: PLR0913 Too many arguments in function definition (10 > 5)
    |
760 |         )
761 |
762 |     async def brave(
    |               ^^^^^ PLR0913
763 |         self,
764 |         query: str,
    |

src/twat_search/web/cli.py:768:9: FBT002 Boolean default positional argument in function definition
    |
766 |         country: str | None = None,
767 |         language: str | None = None,
768 |         safe_search: bool | None = True,
    |         ^^^^^^^^^^^ FBT002
769 |         time_frame: str | None = None,
770 |         api_key: str | None = None,
    |

src/twat_search/web/cli.py:771:9: FBT001 Boolean-typed positional argument in function definition
    |
769 |         time_frame: str | None = None,
770 |         api_key: str | None = None,
771 |         verbose: bool = False,
    |         ^^^^^^^ FBT001
772 |         json: bool = False,
773 |         plain: bool = False,
    |

src/twat_search/web/cli.py:771:9: FBT002 Boolean default positional argument in function definition
    |
769 |         time_frame: str | None = None,
770 |         api_key: str | None = None,
771 |         verbose: bool = False,
    |         ^^^^^^^ FBT002
772 |         json: bool = False,
773 |         plain: bool = False,
    |

src/twat_search/web/cli.py:772:9: FBT001 Boolean-typed positional argument in function definition
    |
770 |         api_key: str | None = None,
771 |         verbose: bool = False,
772 |         json: bool = False,
    |         ^^^^ FBT001
773 |         plain: bool = False,
774 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:772:9: FBT002 Boolean default positional argument in function definition
    |
770 |         api_key: str | None = None,
771 |         verbose: bool = False,
772 |         json: bool = False,
    |         ^^^^ FBT002
773 |         plain: bool = False,
774 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:773:9: FBT001 Boolean-typed positional argument in function definition
    |
771 |         verbose: bool = False,
772 |         json: bool = False,
773 |         plain: bool = False,
    |         ^^^^^ FBT001
774 |         **kwargs: Any,
775 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:773:9: FBT002 Boolean default positional argument in function definition
    |
771 |         verbose: bool = False,
772 |         json: bool = False,
773 |         plain: bool = False,
    |         ^^^^^ FBT002
774 |         **kwargs: Any,
775 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:810:15: PLR0913 Too many arguments in function definition (10 > 5)
    |
808 |         return await self._search_engine("brave", query, params, json, verbose, plain)
809 |
810 |     async def brave_news(
    |               ^^^^^^^^^^ PLR0913
811 |         self,
812 |         query: str,
    |

src/twat_search/web/cli.py:816:9: FBT002 Boolean default positional argument in function definition
    |
814 |         country: str | None = None,
815 |         language: str | None = None,
816 |         safe_search: bool | None = True,
    |         ^^^^^^^^^^^ FBT002
817 |         time_frame: str | None = None,
818 |         api_key: str | None = None,
    |

src/twat_search/web/cli.py:819:9: FBT001 Boolean-typed positional argument in function definition
    |
817 |         time_frame: str | None = None,
818 |         api_key: str | None = None,
819 |         verbose: bool = False,
    |         ^^^^^^^ FBT001
820 |         json: bool = False,
821 |         plain: bool = False,
    |

src/twat_search/web/cli.py:819:9: FBT002 Boolean default positional argument in function definition
    |
817 |         time_frame: str | None = None,
818 |         api_key: str | None = None,
819 |         verbose: bool = False,
    |         ^^^^^^^ FBT002
820 |         json: bool = False,
821 |         plain: bool = False,
    |

src/twat_search/web/cli.py:820:9: FBT001 Boolean-typed positional argument in function definition
    |
818 |         api_key: str | None = None,
819 |         verbose: bool = False,
820 |         json: bool = False,
    |         ^^^^ FBT001
821 |         plain: bool = False,
822 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:820:9: FBT002 Boolean default positional argument in function definition
    |
818 |         api_key: str | None = None,
819 |         verbose: bool = False,
820 |         json: bool = False,
    |         ^^^^ FBT002
821 |         plain: bool = False,
822 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:821:9: FBT001 Boolean-typed positional argument in function definition
    |
819 |         verbose: bool = False,
820 |         json: bool = False,
821 |         plain: bool = False,
    |         ^^^^^ FBT001
822 |         **kwargs: Any,
823 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:821:9: FBT002 Boolean default positional argument in function definition
    |
819 |         verbose: bool = False,
820 |         json: bool = False,
821 |         plain: bool = False,
    |         ^^^^^ FBT002
822 |         **kwargs: Any,
823 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:860:15: PLR0913 Too many arguments in function definition (10 > 5)
    |
858 |         )
859 |
860 |     async def serpapi(
    |               ^^^^^^^ PLR0913
861 |         self,
862 |         query: str,
    |

src/twat_search/web/cli.py:866:9: FBT002 Boolean default positional argument in function definition
    |
864 |         country: str | None = None,
865 |         language: str | None = None,
866 |         safe_search: bool | None = True,
    |         ^^^^^^^^^^^ FBT002
867 |         time_frame: str | None = None,
868 |         api_key: str | None = None,
    |

src/twat_search/web/cli.py:869:9: FBT001 Boolean-typed positional argument in function definition
    |
867 |         time_frame: str | None = None,
868 |         api_key: str | None = None,
869 |         verbose: bool = False,
    |         ^^^^^^^ FBT001
870 |         json: bool = False,
871 |         plain: bool = False,
    |

src/twat_search/web/cli.py:869:9: FBT002 Boolean default positional argument in function definition
    |
867 |         time_frame: str | None = None,
868 |         api_key: str | None = None,
869 |         verbose: bool = False,
    |         ^^^^^^^ FBT002
870 |         json: bool = False,
871 |         plain: bool = False,
    |

src/twat_search/web/cli.py:870:9: FBT001 Boolean-typed positional argument in function definition
    |
868 |         api_key: str | None = None,
869 |         verbose: bool = False,
870 |         json: bool = False,
    |         ^^^^ FBT001
871 |         plain: bool = False,
872 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:870:9: FBT002 Boolean default positional argument in function definition
    |
868 |         api_key: str | None = None,
869 |         verbose: bool = False,
870 |         json: bool = False,
    |         ^^^^ FBT002
871 |         plain: bool = False,
872 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:871:9: FBT001 Boolean-typed positional argument in function definition
    |
869 |         verbose: bool = False,
870 |         json: bool = False,
871 |         plain: bool = False,
    |         ^^^^^ FBT001
872 |         **kwargs: Any,
873 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:871:9: FBT002 Boolean default positional argument in function definition
    |
869 |         verbose: bool = False,
870 |         json: bool = False,
871 |         plain: bool = False,
    |         ^^^^^ FBT002
872 |         **kwargs: Any,
873 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:908:15: PLR0913 Too many arguments in function definition (13 > 5)
    |
906 |         return await self._search_engine("serpapi", query, params, json, verbose, plain)
907 |
908 |     async def tavily(
    |               ^^^^^^ PLR0913
909 |         self,
910 |         query: str,
    |

src/twat_search/web/cli.py:914:9: FBT002 Boolean default positional argument in function definition
    |
912 |         country: str | None = None,
913 |         language: str | None = None,
914 |         safe_search: bool | None = True,
    |         ^^^^^^^^^^^ FBT002
915 |         time_frame: str | None = None,
916 |         api_key: str | None = None,
    |

src/twat_search/web/cli.py:920:9: FBT001 Boolean-typed positional argument in function definition
    |
918 |         include_domains: str | None = None,
919 |         exclude_domains: str | None = None,
920 |         verbose: bool = False,
    |         ^^^^^^^ FBT001
921 |         json: bool = False,
922 |         plain: bool = False,
    |

src/twat_search/web/cli.py:920:9: FBT002 Boolean default positional argument in function definition
    |
918 |         include_domains: str | None = None,
919 |         exclude_domains: str | None = None,
920 |         verbose: bool = False,
    |         ^^^^^^^ FBT002
921 |         json: bool = False,
922 |         plain: bool = False,
    |

src/twat_search/web/cli.py:921:9: FBT001 Boolean-typed positional argument in function definition
    |
919 |         exclude_domains: str | None = None,
920 |         verbose: bool = False,
921 |         json: bool = False,
    |         ^^^^ FBT001
922 |         plain: bool = False,
923 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:921:9: FBT002 Boolean default positional argument in function definition
    |
919 |         exclude_domains: str | None = None,
920 |         verbose: bool = False,
921 |         json: bool = False,
    |         ^^^^ FBT002
922 |         plain: bool = False,
923 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:922:9: FBT001 Boolean-typed positional argument in function definition
    |
920 |         verbose: bool = False,
921 |         json: bool = False,
922 |         plain: bool = False,
    |         ^^^^^ FBT001
923 |         **kwargs: Any,
924 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:922:9: FBT002 Boolean default positional argument in function definition
    |
920 |         verbose: bool = False,
921 |         json: bool = False,
922 |         plain: bool = False,
    |         ^^^^^ FBT002
923 |         **kwargs: Any,
924 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:970:15: PLR0913 Too many arguments in function definition (11 > 5)
    |
968 |         return await self._search_engine("tavily", query, params, json, verbose, plain)
969 |
970 |     async def pplx(
    |               ^^^^ PLR0913
971 |         self,
972 |         query: str,
    |

src/twat_search/web/cli.py:976:9: FBT002 Boolean default positional argument in function definition
    |
974 |         country: str | None = None,
975 |         language: str | None = None,
976 |         safe_search: bool | None = True,
    |         ^^^^^^^^^^^ FBT002
977 |         time_frame: str | None = None,
978 |         api_key: str | None = None,
    |

src/twat_search/web/cli.py:980:9: FBT001 Boolean-typed positional argument in function definition
    |
978 |         api_key: str | None = None,
979 |         model: str | None = None,
980 |         verbose: bool = False,
    |         ^^^^^^^ FBT001
981 |         json: bool = False,
982 |         plain: bool = False,
    |

src/twat_search/web/cli.py:980:9: FBT002 Boolean default positional argument in function definition
    |
978 |         api_key: str | None = None,
979 |         model: str | None = None,
980 |         verbose: bool = False,
    |         ^^^^^^^ FBT002
981 |         json: bool = False,
982 |         plain: bool = False,
    |

src/twat_search/web/cli.py:981:9: FBT001 Boolean-typed positional argument in function definition
    |
979 |         model: str | None = None,
980 |         verbose: bool = False,
981 |         json: bool = False,
    |         ^^^^ FBT001
982 |         plain: bool = False,
983 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:981:9: FBT002 Boolean default positional argument in function definition
    |
979 |         model: str | None = None,
980 |         verbose: bool = False,
981 |         json: bool = False,
    |         ^^^^ FBT002
982 |         plain: bool = False,
983 |         **kwargs: Any,
    |

src/twat_search/web/cli.py:982:9: FBT001 Boolean-typed positional argument in function definition
    |
980 |         verbose: bool = False,
981 |         json: bool = False,
982 |         plain: bool = False,
    |         ^^^^^ FBT001
983 |         **kwargs: Any,
984 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:982:9: FBT002 Boolean default positional argument in function definition
    |
980 |         verbose: bool = False,
981 |         json: bool = False,
982 |         plain: bool = False,
    |         ^^^^^ FBT002
983 |         **kwargs: Any,
984 |     ) -> list[dict[str, Any]]:
    |

src/twat_search/web/cli.py:1020:15: PLR0913 Too many arguments in function definition (10 > 5)
     |
1018 |         return await self._search_engine("pplx", query, params, json, verbose, plain)
1019 |
1020 |     async def you(
     |               ^^^ PLR0913
1021 |         self,
1022 |         query: str,
     |

src/twat_search/web/cli.py:1026:9: FBT002 Boolean default positional argument in function definition
     |
1024 |         country: str | None = None,
1025 |         language: str | None = None,
1026 |         safe_search: bool | None = True,
     |         ^^^^^^^^^^^ FBT002
1027 |         time_frame: str | None = None,
1028 |         api_key: str | None = None,
     |

src/twat_search/web/cli.py:1029:9: FBT001 Boolean-typed positional argument in function definition
     |
1027 |         time_frame: str | None = None,
1028 |         api_key: str | None = None,
1029 |         verbose: bool = False,
     |         ^^^^^^^ FBT001
1030 |         json: bool = False,
1031 |         plain: bool = False,
     |

src/twat_search/web/cli.py:1029:9: FBT002 Boolean default positional argument in function definition
     |
1027 |         time_frame: str | None = None,
1028 |         api_key: str | None = None,
1029 |         verbose: bool = False,
     |         ^^^^^^^ FBT002
1030 |         json: bool = False,
1031 |         plain: bool = False,
     |

src/twat_search/web/cli.py:1030:9: FBT001 Boolean-typed positional argument in function definition
     |
1028 |         api_key: str | None = None,
1029 |         verbose: bool = False,
1030 |         json: bool = False,
     |         ^^^^ FBT001
1031 |         plain: bool = False,
1032 |         **kwargs: Any,
     |

src/twat_search/web/cli.py:1030:9: FBT002 Boolean default positional argument in function definition
     |
1028 |         api_key: str | None = None,
1029 |         verbose: bool = False,
1030 |         json: bool = False,
     |         ^^^^ FBT002
1031 |         plain: bool = False,
1032 |         **kwargs: Any,
     |

src/twat_search/web/cli.py:1031:9: FBT001 Boolean-typed positional argument in function definition
     |
1029 |         verbose: bool = False,
1030 |         json: bool = False,
1031 |         plain: bool = False,
     |         ^^^^^ FBT001
1032 |         **kwargs: Any,
1033 |     ) -> list[dict[str, Any]]:
     |

src/twat_search/web/cli.py:1031:9: FBT002 Boolean default positional argument in function definition
     |
1029 |         verbose: bool = False,
1030 |         json: bool = False,
1031 |         plain: bool = False,
     |         ^^^^^ FBT002
1032 |         **kwargs: Any,
1033 |     ) -> list[dict[str, Any]]:
     |

src/twat_search/web/cli.py:1067:15: PLR0913 Too many arguments in function definition (10 > 5)
     |
1065 |         return await self._search_engine("you", query, params, json, verbose, plain)
1066 |
1067 |     async def you_news(
     |               ^^^^^^^^ PLR0913
1068 |         self,
1069 |         query: str,
     |

src/twat_search/web/cli.py:1073:9: FBT002 Boolean default positional argument in function definition
     |
1071 |         country: str | None = None,
1072 |         language: str | None = None,
1073 |         safe_search: bool | None = True,
     |         ^^^^^^^^^^^ FBT002
1074 |         time_frame: str | None = None,
1075 |         api_key: str | None = None,
     |

src/twat_search/web/cli.py:1076:9: FBT001 Boolean-typed positional argument in function definition
     |
1074 |         time_frame: str | None = None,
1075 |         api_key: str | None = None,
1076 |         verbose: bool = False,
     |         ^^^^^^^ FBT001
1077 |         json: bool = False,
1078 |         plain: bool = False,
     |

src/twat_search/web/cli.py:1076:9: FBT002 Boolean default positional argument in function definition
     |
1074 |         time_frame: str | None = None,
1075 |         api_key: str | None = None,
1076 |         verbose: bool = False,
     |         ^^^^^^^ FBT002
1077 |         json: bool = False,
1078 |         plain: bool = False,
     |

src/twat_search/web/cli.py:1077:9: FBT001 Boolean-typed positional argument in function definition
     |
1075 |         api_key: str | None = None,
1076 |         verbose: bool = False,
1077 |         json: bool = False,
     |         ^^^^ FBT001
1078 |         plain: bool = False,
1079 |         **kwargs: Any,
     |

src/twat_search/web/cli.py:1077:9: FBT002 Boolean default positional argument in function definition
     |
1075 |         api_key: str | None = None,
1076 |         verbose: bool = False,
1077 |         json: bool = False,
     |         ^^^^ FBT002
1078 |         plain: bool = False,
1079 |         **kwargs: Any,
     |

src/twat_search/web/cli.py:1078:9: FBT001 Boolean-typed positional argument in function definition
     |
1076 |         verbose: bool = False,
1077 |         json: bool = False,
1078 |         plain: bool = False,
     |         ^^^^^ FBT001
1079 |         **kwargs: Any,
1080 |     ) -> list[dict[str, Any]]:
     |

src/twat_search/web/cli.py:1078:9: FBT002 Boolean default positional argument in function definition
     |
1076 |         verbose: bool = False,
1077 |         json: bool = False,
1078 |         plain: bool = False,
     |         ^^^^^ FBT002
1079 |         **kwargs: Any,
1080 |     ) -> list[dict[str, Any]]:
     |

src/twat_search/web/cli.py:1116:15: PLR0913 Too many arguments in function definition (11 > 5)
     |
1114 |         )
1115 |
1116 |     async def duckduckgo(
     |               ^^^^^^^^^^ PLR0913
1117 |         self,
1118 |         query: str,
     |

src/twat_search/web/cli.py:1121:9: ARG002 Unused method argument: `language`
     |
1119 |         num_results: int = 5,
1120 |         country: str | None = None,
1121 |         language: str | None = None,
     |         ^^^^^^^^ ARG002
1122 |         safe_search: bool | None = True,
1123 |         time_frame: str | None = None,
     |

src/twat_search/web/cli.py:1122:9: FBT002 Boolean default positional argument in function definition
     |
1120 |         country: str | None = None,
1121 |         language: str | None = None,
1122 |         safe_search: bool | None = True,
     |         ^^^^^^^^^^^ FBT002
1123 |         time_frame: str | None = None,
1124 |         proxy: str | None = None,
     |

src/twat_search/web/cli.py:1126:9: FBT001 Boolean-typed positional argument in function definition
     |
1124 |         proxy: str | None = None,
1125 |         timeout: int = 10,
1126 |         verbose: bool = False,
     |         ^^^^^^^ FBT001
1127 |         json: bool = False,
1128 |         plain: bool = False,
     |

src/twat_search/web/cli.py:1126:9: FBT002 Boolean default positional argument in function definition
     |
1124 |         proxy: str | None = None,
1125 |         timeout: int = 10,
1126 |         verbose: bool = False,
     |         ^^^^^^^ FBT002
1127 |         json: bool = False,
1128 |         plain: bool = False,
     |

src/twat_search/web/cli.py:1127:9: FBT001 Boolean-typed positional argument in function definition
     |
1125 |         timeout: int = 10,
1126 |         verbose: bool = False,
1127 |         json: bool = False,
     |         ^^^^ FBT001
1128 |         plain: bool = False,
1129 |         **kwargs: Any,
     |

src/twat_search/web/cli.py:1127:9: FBT002 Boolean default positional argument in function definition
     |
1125 |         timeout: int = 10,
1126 |         verbose: bool = False,
1127 |         json: bool = False,
     |         ^^^^ FBT002
1128 |         plain: bool = False,
1129 |         **kwargs: Any,
     |

src/twat_search/web/cli.py:1128:9: FBT001 Boolean-typed positional argument in function definition
     |
1126 |         verbose: bool = False,
1127 |         json: bool = False,
1128 |         plain: bool = False,
     |         ^^^^^ FBT001
1129 |         **kwargs: Any,
1130 |     ) -> list[dict[str, Any]]:
     |

src/twat_search/web/cli.py:1128:9: FBT002 Boolean default positional argument in function definition
     |
1126 |         verbose: bool = False,
1127 |         json: bool = False,
1128 |         plain: bool = False,
     |         ^^^^^ FBT002
1129 |         **kwargs: Any,
1130 |     ) -> list[dict[str, Any]]:
     |

src/twat_search/web/cli.py:1167:15: PLR0913 Too many arguments in function definition (8 > 5)
     |
1165 |         )
1166 |
1167 |     async def hasdata_google(
     |               ^^^^^^^^^^^^^^ PLR0913
1168 |         self,
1169 |         query: str,
     |

src/twat_search/web/cli.py:1174:9: FBT001 Boolean-typed positional argument in function definition
     |
1172 |         device_type: str = "desktop",
1173 |         api_key: str | None = None,
1174 |         verbose: bool = False,
     |         ^^^^^^^ FBT001
1175 |         json: bool = False,
1176 |         plain: bool = False,
     |

src/twat_search/web/cli.py:1174:9: FBT002 Boolean default positional argument in function definition
     |
1172 |         device_type: str = "desktop",
1173 |         api_key: str | None = None,
1174 |         verbose: bool = False,
     |         ^^^^^^^ FBT002
1175 |         json: bool = False,
1176 |         plain: bool = False,
     |

src/twat_search/web/cli.py:1175:9: FBT001 Boolean-typed positional argument in function definition
     |
1173 |         api_key: str | None = None,
1174 |         verbose: bool = False,
1175 |         json: bool = False,
     |         ^^^^ FBT001
1176 |         plain: bool = False,
1177 |         **kwargs: Any,
     |

src/twat_search/web/cli.py:1175:9: FBT002 Boolean default positional argument in function definition
     |
1173 |         api_key: str | None = None,
1174 |         verbose: bool = False,
1175 |         json: bool = False,
     |         ^^^^ FBT002
1176 |         plain: bool = False,
1177 |         **kwargs: Any,
     |

src/twat_search/web/cli.py:1176:9: FBT001 Boolean-typed positional argument in function definition
     |
1174 |         verbose: bool = False,
1175 |         json: bool = False,
1176 |         plain: bool = False,
     |         ^^^^^ FBT001
1177 |         **kwargs: Any,
1178 |     ) -> list[dict[str, Any]]:
     |

src/twat_search/web/cli.py:1176:9: FBT002 Boolean default positional argument in function definition
     |
1174 |         verbose: bool = False,
1175 |         json: bool = False,
1176 |         plain: bool = False,
     |         ^^^^^ FBT002
1177 |         **kwargs: Any,
1178 |     ) -> list[dict[str, Any]]:
     |

src/twat_search/web/cli.py:1210:15: PLR0913 Too many arguments in function definition (7 > 5)
     |
1208 |         )
1209 |
1210 |     async def hasdata_google_light(
     |               ^^^^^^^^^^^^^^^^^^^^ PLR0913
1211 |         self,
1212 |         query: str,
     |

src/twat_search/web/cli.py:1216:9: FBT001 Boolean-typed positional argument in function definition
     |
1214 |         location: str | None = None,
1215 |         api_key: str | None = None,
1216 |         verbose: bool = False,
     |         ^^^^^^^ FBT001
1217 |         json: bool = False,
1218 |         plain: bool = False,
     |

src/twat_search/web/cli.py:1216:9: FBT002 Boolean default positional argument in function definition
     |
1214 |         location: str | None = None,
1215 |         api_key: str | None = None,
1216 |         verbose: bool = False,
     |         ^^^^^^^ FBT002
1217 |         json: bool = False,
1218 |         plain: bool = False,
     |

src/twat_search/web/cli.py:1217:9: FBT001 Boolean-typed positional argument in function definition
     |
1215 |         api_key: str | None = None,
1216 |         verbose: bool = False,
1217 |         json: bool = False,
     |         ^^^^ FBT001
1218 |         plain: bool = False,
1219 |         **kwargs: Any,
     |

src/twat_search/web/cli.py:1217:9: FBT002 Boolean default positional argument in function definition
     |
1215 |         api_key: str | None = None,
1216 |         verbose: bool = False,
1217 |         json: bool = False,
     |         ^^^^ FBT002
1218 |         plain: bool = False,
1219 |         **kwargs: Any,
     |

src/twat_search/web/cli.py:1218:9: FBT001 Boolean-typed positional argument in function definition
     |
1216 |         verbose: bool = False,
1217 |         json: bool = False,
1218 |         plain: bool = False,
     |         ^^^^^ FBT001
1219 |         **kwargs: Any,
1220 |     ) -> list[dict[str, Any]]:
     |

src/twat_search/web/cli.py:1218:9: FBT002 Boolean default positional argument in function definition
     |
1216 |         verbose: bool = False,
1217 |         json: bool = False,
1218 |         plain: bool = False,
     |         ^^^^^ FBT002
1219 |         **kwargs: Any,
1220 |     ) -> list[dict[str, Any]]:
     |

src/twat_search/web/cli.py:1252:39: ARG005 Unused lambda argument: `out`
     |
1251 | def main() -> None:
1252 |     fire.core.Display = lambda lines, out: console.print(*lines)
     |                                       ^^^ ARG005
1253 |     fire.Fire(SearchCLI)
     |

src/twat_search/web/config.py:328:9: C901 `_apply_env_overrides` is too complex (14 > 10)
    |
326 |         super().__init__(**config_data)
327 |
328 |     def _apply_env_overrides(self, config_data: dict[str, Any]) -> None:
    |         ^^^^^^^^^^^^^^^^^^^^ C901
329 |         """Apply configuration overrides from environment variables.
    |

src/twat_search/web/config.py:328:9: PLR0912 Too many branches (13 > 12)
    |
326 |         super().__init__(**config_data)
327 |
328 |     def _apply_env_overrides(self, config_data: dict[str, Any]) -> None:
    |         ^^^^^^^^^^^^^^^^^^^^ PLR0912
329 |         """Apply configuration overrides from environment variables.
    |

src/twat_search/web/config.py:409:9: FBT001 Boolean-typed positional argument in function definition
    |
407 |         self,
408 |         engine_name: str,
409 |         enabled: bool = True,
    |         ^^^^^^^ FBT001
410 |         api_key: str | None = None,
411 |         default_params: dict[str, Any] | None = None,
    |

src/twat_search/web/config.py:409:9: FBT002 Boolean default positional argument in function definition
    |
407 |         self,
408 |         engine_name: str,
409 |         enabled: bool = True,
    |         ^^^^^^^ FBT002
410 |         api_key: str | None = None,
411 |         default_params: dict[str, Any] | None = None,
    |

src/twat_search/web/engines/__init__.py:87:9: F401 `twat_search.web.engines.base.SearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
85 | try:
86 |     from twat_search.web.engines.base import (
87 |         SearchEngine,
   |         ^^^^^^^^^^^^ F401
88 |         get_engine,
89 |         get_registered_engines,
   |
   = help: Remove unused import

src/twat_search/web/engines/__init__.py:88:9: F401 `twat_search.web.engines.base.get_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
86 |     from twat_search.web.engines.base import (
87 |         SearchEngine,
88 |         get_engine,
   |         ^^^^^^^^^^ F401
89 |         get_registered_engines,
90 |         register_engine,
   |
   = help: Remove unused import

src/twat_search/web/engines/__init__.py:89:9: F401 `twat_search.web.engines.base.get_registered_engines` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
87 |         SearchEngine,
88 |         get_engine,
89 |         get_registered_engines,
   |         ^^^^^^^^^^^^^^^^^^^^^^ F401
90 |         register_engine,
91 |     )
   |
   = help: Remove unused import

src/twat_search/web/engines/__init__.py:90:9: F401 `twat_search.web.engines.base.register_engine` imported but unused; consider using `importlib.util.find_spec` to test for availability
   |
88 |         get_engine,
89 |         get_registered_engines,
90 |         register_engine,
   |         ^^^^^^^^^^^^^^^ F401
91 |     )
   |
   = help: Remove unused import

src/twat_search/web/engines/__init__.py:102:9: F401 `twat_search.web.engines.brave.BraveNewsSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
100 | try:
101 |     from twat_search.web.engines.brave import (
102 |         BraveNewsSearchEngine,
    |         ^^^^^^^^^^^^^^^^^^^^^ F401
103 |         BraveSearchEngine,
104 |         brave,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:103:9: F401 `twat_search.web.engines.brave.BraveSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
101 |     from twat_search.web.engines.brave import (
102 |         BraveNewsSearchEngine,
103 |         BraveSearchEngine,
    |         ^^^^^^^^^^^^^^^^^ F401
104 |         brave,
105 |         brave_news,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:118:49: F401 `twat_search.web.engines.serpapi.SerpApiSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
116 | # Try to import SerpAPI engine
117 | try:
118 |     from twat_search.web.engines.serpapi import SerpApiSearchEngine, google_serpapi
    |                                                 ^^^^^^^^^^^^^^^^^^^ F401
119 |
120 |     available_engine_functions["google_serpapi"] = google_serpapi
    |
    = help: Remove unused import: `twat_search.web.engines.serpapi.SerpApiSearchEngine`

src/twat_search/web/engines/__init__.py:126:48: F401 `twat_search.web.engines.tavily.TavilySearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
125 | try:
126 |     from twat_search.web.engines.tavily import TavilySearchEngine, tavily
    |                                                ^^^^^^^^^^^^^^^^^^ F401
127 |
128 |     available_engine_functions["tavily"] = tavily
    |
    = help: Remove unused import: `twat_search.web.engines.tavily.TavilySearchEngine`

src/twat_search/web/engines/__init__.py:134:46: F401 `twat_search.web.engines.pplx.PerplexitySearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
133 | try:
134 |     from twat_search.web.engines.pplx import PerplexitySearchEngine, pplx
    |                                              ^^^^^^^^^^^^^^^^^^^^^^ F401
135 |
136 |     available_engine_functions["pplx"] = pplx
    |
    = help: Remove unused import: `twat_search.web.engines.pplx.PerplexitySearchEngine`

src/twat_search/web/engines/__init__.py:143:9: F401 `twat_search.web.engines.you.YouNewsSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
141 | try:
142 |     from twat_search.web.engines.you import (
143 |         YouNewsSearchEngine,
    |         ^^^^^^^^^^^^^^^^^^^ F401
144 |         YouSearchEngine,
145 |         you,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:144:9: F401 `twat_search.web.engines.you.YouSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
142 |     from twat_search.web.engines.you import (
143 |         YouNewsSearchEngine,
144 |         YouSearchEngine,
    |         ^^^^^^^^^^^^^^^ F401
145 |         you,
146 |         you_news,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:156:50: F401 `twat_search.web.engines.critique.CritiqueSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
155 | try:
156 |     from twat_search.web.engines.critique import CritiqueSearchEngine, critique
    |                                                  ^^^^^^^^^^^^^^^^^^^^ F401
157 |
158 |     available_engine_functions["critique"] = critique
    |
    = help: Remove unused import: `twat_search.web.engines.critique.CritiqueSearchEngine`

src/twat_search/web/engines/__init__.py:164:52: F401 `twat_search.web.engines.duckduckgo.DuckDuckGoSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
163 | try:
164 |     from twat_search.web.engines.duckduckgo import DuckDuckGoSearchEngine, duckduckgo
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^ F401
165 |
166 |     available_engine_functions["duckduckgo"] = duckduckgo
    |
    = help: Remove unused import: `twat_search.web.engines.duckduckgo.DuckDuckGoSearchEngine`

src/twat_search/web/engines/__init__.py:174:9: F401 `twat_search.web.engines.bing_scraper.BingScraperSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
172 | try:
173 |     from twat_search.web.engines.bing_scraper import (
174 |         BingScraperSearchEngine,
    |         ^^^^^^^^^^^^^^^^^^^^^^^ F401
175 |         bing_scraper,
176 |     )
    |
    = help: Remove unused import: `twat_search.web.engines.bing_scraper.BingScraperSearchEngine`

src/twat_search/web/engines/__init__.py:186:9: F401 `twat_search.web.engines.hasdata.HasDataGoogleEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
184 | try:
185 |     from twat_search.web.engines.hasdata import (
186 |         HasDataGoogleEngine,
    |         ^^^^^^^^^^^^^^^^^^^ F401
187 |         HasDataGoogleLightEngine,
188 |         hasdata_google,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:187:9: F401 `twat_search.web.engines.hasdata.HasDataGoogleLightEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
185 |     from twat_search.web.engines.hasdata import (
186 |         HasDataGoogleEngine,
187 |         HasDataGoogleLightEngine,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ F401
188 |         hasdata_google,
189 |         hasdata_google_full,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:208:9: F401 `twat_search.web.engines.google_scraper.GoogleScraperEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
206 | try:
207 |     from twat_search.web.engines.google_scraper import (
208 |         GoogleScraperEngine,
    |         ^^^^^^^^^^^^^^^^^^^ F401
209 |         google_scraper,
210 |     )
    |
    = help: Remove unused import: `twat_search.web.engines.google_scraper.GoogleScraperEngine`

src/twat_search/web/engines/__init__.py:220:9: F401 `twat_search.web.engines.searchit.BingSearchitEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
218 | try:
219 |     from twat_search.web.engines.searchit import (
220 |         BingSearchitEngine,
    |         ^^^^^^^^^^^^^^^^^^ F401
221 |         GoogleSearchitEngine,
222 |         QwantSearchitEngine,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:221:9: F401 `twat_search.web.engines.searchit.GoogleSearchitEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
219 |     from twat_search.web.engines.searchit import (
220 |         BingSearchitEngine,
221 |         GoogleSearchitEngine,
    |         ^^^^^^^^^^^^^^^^^^^^ F401
222 |         QwantSearchitEngine,
223 |         YandexSearchitEngine,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:222:9: F401 `twat_search.web.engines.searchit.QwantSearchitEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
220 |         BingSearchitEngine,
221 |         GoogleSearchitEngine,
222 |         QwantSearchitEngine,
    |         ^^^^^^^^^^^^^^^^^^^ F401
223 |         YandexSearchitEngine,
224 |         bing_searchit,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:223:9: F401 `twat_search.web.engines.searchit.YandexSearchitEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
221 |         GoogleSearchitEngine,
222 |         QwantSearchitEngine,
223 |         YandexSearchitEngine,
    |         ^^^^^^^^^^^^^^^^^^^^ F401
224 |         bing_searchit,
225 |         google_searchit,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:252:9: F401 `twat_search.web.engines.anywebsearch.BingAnyWebSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
250 | try:
251 |     from twat_search.web.engines.anywebsearch import (
252 |         BingAnyWebSearchEngine,
    |         ^^^^^^^^^^^^^^^^^^^^^^ F401
253 |         BraveAnyWebSearchEngine,
254 |         GoogleAnyWebSearchEngine,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:253:9: F401 `twat_search.web.engines.anywebsearch.BraveAnyWebSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
251 |     from twat_search.web.engines.anywebsearch import (
252 |         BingAnyWebSearchEngine,
253 |         BraveAnyWebSearchEngine,
    |         ^^^^^^^^^^^^^^^^^^^^^^^ F401
254 |         GoogleAnyWebSearchEngine,
255 |         QwantAnyWebSearchEngine,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:254:9: F401 `twat_search.web.engines.anywebsearch.GoogleAnyWebSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
252 |         BingAnyWebSearchEngine,
253 |         BraveAnyWebSearchEngine,
254 |         GoogleAnyWebSearchEngine,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ F401
255 |         QwantAnyWebSearchEngine,
256 |         YandexAnyWebSearchEngine,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:255:9: F401 `twat_search.web.engines.anywebsearch.QwantAnyWebSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
253 |         BraveAnyWebSearchEngine,
254 |         GoogleAnyWebSearchEngine,
255 |         QwantAnyWebSearchEngine,
    |         ^^^^^^^^^^^^^^^^^^^^^^^ F401
256 |         YandexAnyWebSearchEngine,
257 |         bing_anyws,
    |
    = help: Remove unused import

src/twat_search/web/engines/__init__.py:256:9: F401 `twat_search.web.engines.anywebsearch.YandexAnyWebSearchEngine` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
254 |         GoogleAnyWebSearchEngine,
255 |         QwantAnyWebSearchEngine,
256 |         YandexAnyWebSearchEngine,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ F401
257 |         bing_anyws,
258 |         brave_anyws,
    |
    = help: Remove unused import

src/twat_search/web/engines/anywebsearch.py:60:13: FBT001 Boolean-typed positional argument in function definition
   |
58 |             language: str = "en",
59 |             num_results: int = 20,
60 |             merge: bool = True,
   |             ^^^^^ FBT001
61 |             engines: list[str] | None = None,
62 |             **kwargs: Any,
   |

src/twat_search/web/engines/anywebsearch.py:60:13: FBT002 Boolean default positional argument in function definition
   |
58 |             language: str = "en",
59 |             num_results: int = 20,
60 |             merge: bool = True,
   |             ^^^^^ FBT002
61 |             engines: list[str] | None = None,
62 |             **kwargs: Any,
   |

src/twat_search/web/engines/anywebsearch.py:139:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
137 |     env_api_key_names: ClassVar[list[str]] = []  # Override as needed
138 |
139 |     def __init__(
    |         ^^^^^^^^ PLR0913
140 |         self,
141 |         config: EngineConfig,
    |

src/twat_search/web/engines/anywebsearch.py:145:9: FBT002 Boolean default positional argument in function definition
    |
143 |         country: str | None = None,
144 |         language: str | None = None,
145 |         safe_search: bool | str | None = True,
    |         ^^^^^^^^^^^ FBT002
146 |         time_frame: str | None = None,
147 |         **kwargs: Any,
    |

src/twat_search/web/engines/bing_scraper.py:54:26: ARG002 Unused method argument: `query`
   |
52 |             self.delay_between_requests = delay_between_requests
53 |
54 |         def search(self, query: str, num_results: int = 10) -> list[Any]:
   |                          ^^^^^ ARG002
55 |             """
56 |             Dummy search method for type checking.
   |

src/twat_search/web/engines/bing_scraper.py:54:38: ARG002 Unused method argument: `num_results`
   |
52 |             self.delay_between_requests = delay_between_requests
53 |
54 |         def search(self, query: str, num_results: int = 10) -> list[Any]:
   |                                      ^^^^^^^^^^^ ARG002
55 |             """
56 |             Dummy search method for type checking.
   |

src/twat_search/web/engines/bing_scraper.py:105:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
103 |     env_api_key_names: ClassVar[list[str]] = []  # No API key needed
104 |
105 |     def __init__(
    |         ^^^^^^^^ PLR0913
106 |         self,
107 |         config: EngineConfig,
    |

src/twat_search/web/engines/bing_scraper.py:111:9: FBT002 Boolean default positional argument in function definition
    |
109 |         country: str | None = None,
110 |         language: str | None = None,
111 |         safe_search: bool | str | None = True,
    |         ^^^^^^^^^^^ FBT002
112 |         time_frame: str | None = None,
113 |         **kwargs: Any,
    |

src/twat_search/web/engines/brave.py:36:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
34 |     result_model: type[BaseModel]  # Either BraveResult or BraveNewsResult.
35 |
36 |     def __init__(
   |         ^^^^^^^^ PLR0913
37 |         self,
38 |         config: EngineConfig,
   |

src/twat_search/web/engines/brave.py:42:9: FBT002 Boolean default positional argument in function definition
   |
40 |         country: str | None = None,
41 |         language: str | None = None,
42 |         safe_search: bool | str | None = True,
   |         ^^^^^^^^^^^ FBT002
43 |         time_frame: str | None = None,
44 |         **kwargs: Any,
   |

src/twat_search/web/engines/brave.py:77:15: C901 `search` is too complex (12 > 10)
   |
75 |         }
76 |
77 |     async def search(self, query: str) -> list[SearchResult]:
   |               ^^^^^^ C901
78 |         params: dict[str, Any] = {"q": query, "count": self.count}
79 |         if self.country:
   |

src/twat_search/web/engines/brave.py:159:11: PLR0913 Too many arguments in function definition (7 > 5)
    |
159 | async def brave(
    |           ^^^^^ PLR0913
160 |     query: str,
161 |     num_results: int = 5,
    |

src/twat_search/web/engines/brave.py:164:5: FBT002 Boolean default positional argument in function definition
    |
162 |     country: str | None = None,
163 |     language: str | None = None,
164 |     safe_search: bool | str | None = True,
    |     ^^^^^^^^^^^ FBT002
165 |     time_frame: str | None = None,
166 |     api_key: str | None = None,
    |

src/twat_search/web/engines/brave.py:195:11: PLR0913 Too many arguments in function definition (7 > 5)
    |
195 | async def brave_news(
    |           ^^^^^^^^^^ PLR0913
196 |     query: str,
197 |     num_results: int = 5,
    |

src/twat_search/web/engines/brave.py:200:5: FBT002 Boolean default positional argument in function definition
    |
198 |     country: str | None = None,
199 |     language: str | None = None,
200 |     safe_search: bool | str | None = True,
    |     ^^^^^^^^^^^ FBT002
201 |     time_frame: str | None = None,
202 |     api_key: str | None = None,
    |

src/twat_search/web/engines/critique.py:54:9: PLR0913 Too many arguments in function definition (11 > 5)
   |
52 |     ]
53 |
54 |     def __init__(
   |         ^^^^^^^^ PLR0913
55 |         self,
56 |         config: EngineConfig,
   |

src/twat_search/web/engines/critique.py:60:9: FBT002 Boolean default positional argument in function definition
   |
58 |         country: str | None = None,
59 |         language: str | None = None,
60 |         safe_search: bool | None = True,
   |         ^^^^^^^^^^^ FBT002
61 |         time_frame: str | None = None,
62 |         image_url: str | None = None,
   |

src/twat_search/web/engines/critique.py:109:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
107 |                 return f"data:image/jpeg;base64,{encoded}"
108 |         except httpx.RequestError as e:
109 |             raise EngineError(self.engine_code, f"Failed to fetch image from URL: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
110 |         except Exception as e:
111 |             raise EngineError(self.engine_code, f"Error processing image: {e}")
    |

src/twat_search/web/engines/critique.py:111:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
109 |             raise EngineError(self.engine_code, f"Failed to fetch image from URL: {e}")
110 |         except Exception as e:
111 |             raise EngineError(self.engine_code, f"Error processing image: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
112 |
113 |     async def _build_payload(self, query: str) -> dict[str, Any]:
    |

src/twat_search/web/engines/critique.py:219:11: PLR0913 Too many arguments in function definition (12 > 5)
    |
219 | async def critique(
    |           ^^^^^^^^ PLR0913
220 |     query: str,
221 |     num_results: int = 5,
    |

src/twat_search/web/engines/critique.py:224:5: FBT002 Boolean default positional argument in function definition
    |
222 |     country: str | None = None,
223 |     language: str | None = None,
224 |     safe_search: bool | None = True,
    |     ^^^^^^^^^^^ FBT002
225 |     time_frame: str | None = None,
226 |     image_url: str | None = None,
    |

src/twat_search/web/engines/duckduckgo.py:47:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
45 |     env_api_key_names: ClassVar[list[str]] = []  # No API key needed
46 |
47 |     def __init__(
   |         ^^^^^^^^ PLR0913
48 |         self,
49 |         config: EngineConfig,
   |

src/twat_search/web/engines/duckduckgo.py:53:9: FBT002 Boolean default positional argument in function definition
   |
51 |         country: str | None = None,
52 |         language: str | None = None,
53 |         safe_search: bool | str | None = True,
   |         ^^^^^^^^^^^ FBT002
54 |         time_frame: str | None = None,
55 |         **kwargs: Any,
   |

src/twat_search/web/engines/duckduckgo.py:87:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
86 |     @staticmethod
87 |     def _map_init_params(
   |         ^^^^^^^^^^^^^^^^ PLR0913
88 |         num_results: int,
89 |         country: str | None,
   |

src/twat_search/web/engines/duckduckgo.py:175:11: PLR0913 Too many arguments in function definition (8 > 5)
    |
175 | async def duckduckgo(
    |           ^^^^^^^^^^ PLR0913
176 |     query: str,
177 |     num_results: int = 5,
    |

src/twat_search/web/engines/duckduckgo.py:180:5: FBT001 Boolean-typed positional argument in function definition
    |
178 |     country: str | None = None,
179 |     language: str | None = None,
180 |     safe_search: bool = True,
    |     ^^^^^^^^^^^ FBT001
181 |     time_frame: str | None = None,
182 |     proxy: str | None = None,
    |

src/twat_search/web/engines/duckduckgo.py:180:5: FBT002 Boolean default positional argument in function definition
    |
178 |     country: str | None = None,
179 |     language: str | None = None,
180 |     safe_search: bool = True,
    |     ^^^^^^^^^^^ FBT002
181 |     time_frame: str | None = None,
182 |     proxy: str | None = None,
    |

src/twat_search/web/engines/google_scraper.py:103:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
101 |     env_api_key_names: ClassVar[list[str]] = []  # No API key needed
102 |
103 |     def __init__(
    |         ^^^^^^^^ PLR0913
104 |         self,
105 |         config: EngineConfig,
    |

src/twat_search/web/engines/google_scraper.py:109:9: FBT002 Boolean default positional argument in function definition
    |
107 |         country: str | None = None,
108 |         language: str | None = None,
109 |         safe_search: bool | str | None = True,
    |         ^^^^^^^^^^^ FBT002
110 |         time_frame: str | None = None,
111 |         **kwargs: Any,
    |

src/twat_search/web/engines/google_scraper.py:296:11: PLR0913 Too many arguments in function definition (9 > 5)
    |
296 | async def google_scraper(
    |           ^^^^^^^^^^^^^^ PLR0913
297 |     query: str,
298 |     num_results: int = 5,
    |

src/twat_search/web/engines/google_scraper.py:301:5: FBT001 Boolean-typed positional argument in function definition
    |
299 |     language: str = "en",
300 |     country: str | None = None,
301 |     safe_search: bool = True,
    |     ^^^^^^^^^^^ FBT001
302 |     sleep_interval: float = 0.0,
303 |     ssl_verify: bool | None = None,
    |

src/twat_search/web/engines/google_scraper.py:301:5: FBT002 Boolean default positional argument in function definition
    |
299 |     language: str = "en",
300 |     country: str | None = None,
301 |     safe_search: bool = True,
    |     ^^^^^^^^^^^ FBT002
302 |     sleep_interval: float = 0.0,
303 |     ssl_verify: bool | None = None,
    |

src/twat_search/web/engines/google_scraper.py:305:5: FBT001 Boolean-typed positional argument in function definition
    |
303 |     ssl_verify: bool | None = None,
304 |     proxy: str | None = None,
305 |     unique: bool = True,
    |     ^^^^^^ FBT001
306 |     **kwargs: Any,
307 | ) -> list[SearchResult]:
    |

src/twat_search/web/engines/google_scraper.py:305:5: FBT002 Boolean default positional argument in function definition
    |
303 |     ssl_verify: bool | None = None,
304 |     proxy: str | None = None,
305 |     unique: bool = True,
    |     ^^^^^^ FBT002
306 |     **kwargs: Any,
307 | ) -> list[SearchResult]:
    |

src/twat_search/web/engines/pplx.py:44:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
42 |     ]
43 |
44 |     def __init__(
   |         ^^^^^^^^ PLR0913
45 |         self,
46 |         config: EngineConfig,
   |

src/twat_search/web/engines/pplx.py:50:9: FBT002 Boolean default positional argument in function definition
   |
48 |         country: str | None = None,
49 |         language: str | None = None,
50 |         safe_search: bool | None = True,
   |         ^^^^^^^^^^^ FBT002
51 |         time_frame: str | None = None,
52 |         model: str | None = None,
   |

src/twat_search/web/engines/pplx.py:137:11: PLR0913 Too many arguments in function definition (8 > 5)
    |
137 | async def pplx(
    |           ^^^^ PLR0913
138 |     query: str,
139 |     num_results: int = 5,
    |

src/twat_search/web/engines/pplx.py:142:5: FBT002 Boolean default positional argument in function definition
    |
140 |     country: str | None = None,
141 |     language: str | None = None,
142 |     safe_search: bool | None = True,
    |     ^^^^^^^^^^^ FBT002
143 |     time_frame: str | None = None,
144 |     model: str | None = None,
    |

src/twat_search/web/engines/searchit.py:63:13: PLR0913 Too many arguments in function definition (7 > 5)
   |
61 |         """Dummy class for type checking when searchit is not installed."""
62 |
63 |         def __init__(
   |             ^^^^^^^^ PLR0913
64 |             self,
65 |             term: str,
   |

src/twat_search/web/engines/searchit.py:105:32: ARG002 Unused method argument: `request`
    |
103 |             self.max_results = max_results_per_page
104 |
105 |         async def scrape(self, request: ScrapeRequest) -> list[SearchitResult]:
    |                                ^^^^^^^ ARG002
106 |             """
107 |             Dummy scrape method for type checking.
    |

src/twat_search/web/engines/searchit.py:129:32: ARG002 Unused method argument: `request`
    |
127 |             self.max_results = max_results_per_page
128 |
129 |         async def scrape(self, request: ScrapeRequest) -> list[SearchitResult]:
    |                                ^^^^^^^ ARG002
130 |             """
131 |             Dummy scrape method for type checking.
    |

src/twat_search/web/engines/searchit.py:153:32: ARG002 Unused method argument: `request`
    |
151 |             self.max_results = max_results_per_page
152 |
153 |         async def scrape(self, request: ScrapeRequest) -> list[SearchitResult]:
    |                                ^^^^^^^ ARG002
154 |             """
155 |             Dummy scrape method for type checking.
    |

src/twat_search/web/engines/searchit.py:177:32: ARG002 Unused method argument: `request`
    |
175 |             self.max_results = max_results_per_page
176 |
177 |         async def scrape(self, request: ScrapeRequest) -> list[SearchitResult]:
    |                                ^^^^^^^ ARG002
178 |             """
179 |             Dummy scrape method for type checking.
    |

src/twat_search/web/engines/searchit.py:241:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
239 |     env_api_key_names: ClassVar[list[str]] = []  # No API key needed for scrapers
240 |
241 |     def __init__(
    |         ^^^^^^^^ PLR0913
242 |         self,
243 |         config: EngineConfig,
    |

src/twat_search/web/engines/searchit.py:247:9: FBT002 Boolean default positional argument in function definition
    |
245 |         country: str | None = None,
246 |         language: str | None = None,
247 |         safe_search: bool | str | None = True,
    |         ^^^^^^^^^^^ FBT002
248 |         time_frame: str | None = None,
249 |         **kwargs: Any,
    |

src/twat_search/web/engines/searchit.py:688:11: PLR0913 Too many arguments in function definition (6 > 5)
    |
687 | # Convenience functions for each engine
688 | async def google_searchit(
    |           ^^^^^^^^^^^^^^^ PLR0913
689 |     query: str,
690 |     num_results: int = 5,
    |

src/twat_search/web/engines/searchit.py:729:11: PLR0913 Too many arguments in function definition (6 > 5)
    |
729 | async def yandex_searchit(
    |           ^^^^^^^^^^^^^^^ PLR0913
730 |     query: str,
731 |     num_results: int = 5,
    |

src/twat_search/web/engines/searchit.py:770:11: PLR0913 Too many arguments in function definition (6 > 5)
    |
770 | async def qwant_searchit(
    |           ^^^^^^^^^^^^^^ PLR0913
771 |     query: str,
772 |     num_results: int = 5,
    |

src/twat_search/web/engines/searchit.py:811:11: PLR0913 Too many arguments in function definition (6 > 5)
    |
811 | async def bing_searchit(
    |           ^^^^^^^^^^^^^ PLR0913
812 |     query: str,
813 |     num_results: int = 5,
    |

src/twat_search/web/engines/serpapi.py:53:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
51 |     env_api_key_names: ClassVar[list[str]] = ["SERPAPI_API_KEY"]
52 |
53 |     def __init__(
   |         ^^^^^^^^ PLR0913
54 |         self,
55 |         config: EngineConfig,
   |

src/twat_search/web/engines/serpapi.py:59:9: FBT002 Boolean default positional argument in function definition
   |
57 |         country: str | None = None,
58 |         language: str | None = None,
59 |         safe_search: bool | str | None = True,
   |         ^^^^^^^^^^^ FBT002
60 |         time_frame: str | None = None,
61 |         **kwargs: Any,
   |

src/twat_search/web/engines/serpapi.py:174:11: PLR0913 Too many arguments in function definition (8 > 5)
    |
174 | async def google_serpapi(
    |           ^^^^^^^^^^^^^^ PLR0913
175 |     query: str,
176 |     num_results: int = 5,
    |

src/twat_search/web/engines/serpapi.py:179:5: FBT002 Boolean default positional argument in function definition
    |
177 |     country: str | None = None,
178 |     language: str | None = None,
179 |     safe_search: bool | str | None = True,
    |     ^^^^^^^^^^^ FBT002
180 |     time_frame: str | None = None,
181 |     google_domain: str | None = None,
    |

src/twat_search/web/engines/tavily.py:57:9: PLR0913 Too many arguments in function definition (12 > 5)
   |
55 |     env_api_key_names: ClassVar[list[str]] = ["TAVILY_API_KEY"]
56 |
57 |     def __init__(
   |         ^^^^^^^^ PLR0913
58 |         self,
59 |         config: EngineConfig,
   |

src/twat_search/web/engines/tavily.py:63:9: FBT002 Boolean default positional argument in function definition
   |
61 |         country: str | None = None,
62 |         language: str | None = None,
63 |         safe_search: bool | None = True,
   |         ^^^^^^^^^^^ FBT002
64 |         time_frame: str | None = None,
65 |         search_depth: str = "basic",
   |

src/twat_search/web/engines/tavily.py:68:9: FBT001 Boolean-typed positional argument in function definition
   |
66 |         include_domains: list[str] | None = None,
67 |         exclude_domains: list[str] | None = None,
68 |         include_answer: bool = False,
   |         ^^^^^^^^^^^^^^ FBT001
69 |         max_tokens: int | None = None,
70 |         search_type: str = "search",
   |

src/twat_search/web/engines/tavily.py:68:9: FBT002 Boolean default positional argument in function definition
   |
66 |         include_domains: list[str] | None = None,
67 |         exclude_domains: list[str] | None = None,
68 |         include_answer: bool = False,
   |         ^^^^^^^^^^^^^^ FBT002
69 |         max_tokens: int | None = None,
70 |         search_type: str = "search",
   |

src/twat_search/web/engines/tavily.py:96:77: FBT003 Boolean positional value in function call
   |
94 |         self.include_domains = get_default(include_domains, "include_domains", None)
95 |         self.exclude_domains = get_default(exclude_domains, "exclude_domains", None)
96 |         self.include_answer = get_default(include_answer, "include_answer", False)
   |                                                                             ^^^^^ FBT003
97 |         self.max_tokens = get_default(max_tokens, "max_tokens", None)
98 |         self.search_type = get_default(search_type, "search_type", "search")
   |

src/twat_search/web/engines/tavily.py:175:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
173 |                 data = response.json()
174 |             except httpx.HTTPStatusError as e:
175 |                 raise EngineError(self.engine_code, f"HTTP error: {e}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
176 |             except httpx.RequestError as e:
177 |                 raise EngineError(self.engine_code, f"Request error: {e}")
    |

src/twat_search/web/engines/tavily.py:177:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
175 |                 raise EngineError(self.engine_code, f"HTTP error: {e}")
176 |             except httpx.RequestError as e:
177 |                 raise EngineError(self.engine_code, f"Request error: {e}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
178 |             except Exception as e:
179 |                 raise EngineError(self.engine_code, f"Error: {e!s}")
    |

src/twat_search/web/engines/tavily.py:179:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
177 |                 raise EngineError(self.engine_code, f"Request error: {e}")
178 |             except Exception as e:
179 |                 raise EngineError(self.engine_code, f"Error: {e!s}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
180 |
181 |         results = []
    |

src/twat_search/web/engines/tavily.py:197:11: PLR0913 Too many arguments in function definition (13 > 5)
    |
197 | async def tavily(
    |           ^^^^^^ PLR0913
198 |     query: str,
199 |     num_results: int = 5,
    |

src/twat_search/web/engines/tavily.py:202:5: FBT002 Boolean default positional argument in function definition
    |
200 |     country: str | None = None,
201 |     language: str | None = None,
202 |     safe_search: bool | None = True,
    |     ^^^^^^^^^^^ FBT002
203 |     time_frame: str | None = None,
204 |     search_depth: str = "basic",
    |

src/twat_search/web/engines/tavily.py:207:5: FBT001 Boolean-typed positional argument in function definition
    |
205 |     include_domains: list[str] | None = None,
206 |     exclude_domains: list[str] | None = None,
207 |     include_answer: bool = False,
    |     ^^^^^^^^^^^^^^ FBT001
208 |     max_tokens: int | None = None,
209 |     search_type: str = "search",
    |

src/twat_search/web/engines/tavily.py:207:5: FBT002 Boolean default positional argument in function definition
    |
205 |     include_domains: list[str] | None = None,
206 |     exclude_domains: list[str] | None = None,
207 |     include_answer: bool = False,
    |     ^^^^^^^^^^^^^^ FBT002
208 |     max_tokens: int | None = None,
209 |     search_type: str = "search",
    |

src/twat_search/web/engines/you.py:43:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
41 |     env_api_key_names: ClassVar[list[str]] = ["YOU_API_KEY"]
42 |
43 |     def __init__(
   |         ^^^^^^^^ PLR0913
44 |         self,
45 |         config: EngineConfig,
   |

src/twat_search/web/engines/you.py:48:9: ARG002 Unused method argument: `language`
   |
46 |         num_results: int = 5,
47 |         country: str | None = None,
48 |         language: str | None = None,
   |         ^^^^^^^^ ARG002
49 |         safe_search: bool | None = True,
50 |         time_frame: str | None = None,
   |

src/twat_search/web/engines/you.py:49:9: FBT002 Boolean default positional argument in function definition
   |
47 |         country: str | None = None,
48 |         language: str | None = None,
49 |         safe_search: bool | None = True,
   |         ^^^^^^^^^^^ FBT002
50 |         time_frame: str | None = None,
51 |         **kwargs: Any,
   |

src/twat_search/web/engines/you.py:50:9: ARG002 Unused method argument: `time_frame`
   |
48 |         language: str | None = None,
49 |         safe_search: bool | None = True,
50 |         time_frame: str | None = None,
   |         ^^^^^^^^^^ ARG002
51 |         **kwargs: Any,
52 |     ) -> None:
   |

src/twat_search/web/engines/you.py:51:11: ARG002 Unused method argument: `kwargs`
   |
49 |         safe_search: bool | None = True,
50 |         time_frame: str | None = None,
51 |         **kwargs: Any,
   |           ^^^^^^ ARG002
52 |     ) -> None:
53 |         """Initialize the base engine with common parameters."""
   |

src/twat_search/web/engines/you.py:191:11: PLR0913 Too many arguments in function definition (7 > 5)
    |
191 | async def you(
    |           ^^^ PLR0913
192 |     query: str,
193 |     num_results: int = 5,
    |

src/twat_search/web/engines/you.py:196:5: FBT002 Boolean default positional argument in function definition
    |
194 |     country: str | None = None,
195 |     language: str | None = None,
196 |     safe_search: bool | None = True,
    |     ^^^^^^^^^^^ FBT002
197 |     time_frame: str | None = None,
198 |     api_key: str | None = None,
    |

src/twat_search/web/engines/you.py:213:11: PLR0913 Too many arguments in function definition (7 > 5)
    |
213 | async def you_news(
    |           ^^^^^^^^ PLR0913
214 |     query: str,
215 |     num_results: int = 5,
    |

src/twat_search/web/engines/you.py:218:5: FBT002 Boolean default positional argument in function definition
    |
216 |     country: str | None = None,
217 |     language: str | None = None,
218 |     safe_search: bool | None = True,
    |     ^^^^^^^^^^^ FBT002
219 |     time_frame: str | None = None,
220 |     api_key: str | None = None,
    |

src/twat_search/web/utils.py:48:33: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
   |
46 |             sleep_time = 1 - (now - self.call_timestamps[0])
47 |             if sleep_time > 0:
48 |                 if sleep_time > 0.1:  # Only log if sleep time is significant
   |                                 ^^^ PLR2004
49 |                     logger.debug(f"Rate limiting: sleeping for {sleep_time:.2f}s")
50 |                 time.sleep(sleep_time)
   |

tests/unit/web/engines/test_base.py:88:32: ARG002 Unused method argument: `query`
   |
86 |         engine_code = "new_engine"
87 |
88 |         async def search(self, query: str) -> list[SearchResult]:
   |                                ^^^^^ ARG002
89 |             return []
   |

tests/unit/web/engines/test_base.py:137:40: PLR2004 Magic value used in comparison, consider replacing `30` with a constant variable
    |
135 |     # Check that kwargs were stored by the engine
136 |     assert engine.kwargs == kwargs
137 |     assert engine.kwargs["timeout"] == 30
    |                                        ^^ PLR2004
138 |     assert engine.kwargs["country"] == "US"
    |

tests/unit/web/test_api.py:103:28: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
101 |     results = await search("test query", engines=["mock"], config=mock_config)
102 |
103 |     assert len(results) == 2
    |                            ^ PLR2004
104 |     assert all(isinstance(result, SearchResult) for result in results)
105 |     assert all(result.source == "mock" for result in results)
    |

tests/unit/web/test_api.py:118:28: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
116 |     )
117 |
118 |     assert len(results) == 3
    |                            ^ PLR2004
    |

tests/unit/web/test_api.py:130:28: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
    |
128 |     )
129 |
130 |     assert len(results) == 4
    |                            ^ PLR2004
    |

tests/unit/web/test_exceptions.py:64:31: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
62 |         exceptions.append(e)
63 |
64 |     assert len(exceptions) == 2
   |                               ^ PLR2004
65 |     assert isinstance(exceptions[0], SearchError)
66 |     assert isinstance(exceptions[1], EngineError)
   |

tests/unit/web/test_utils.py:28:40: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
   |
26 |     """Test RateLimiter initialization."""
27 |     limiter = RateLimiter(calls_per_second=10)
28 |     assert limiter.calls_per_second == 10
   |                                        ^^ PLR2004
29 |     assert limiter.call_timestamps == []
   |

tests/web/test_bing_scraper.py:68:25: N803 Argument name `mock_BingScraper` should be lowercase
   |
67 |     @patch("twat_search.web.engines.bing_scraper.BingScraper")
68 |     def test_init(self, mock_BingScraper: MagicMock, engine: Any) -> None:
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
69 |         """Test BingScraperSearchEngine initialization."""
70 |         assert engine.engine_code == "bing_scraper"
   |

tests/web/test_bing_scraper.py:71:38: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
   |
69 |         """Test BingScraperSearchEngine initialization."""
70 |         assert engine.engine_code == "bing_scraper"
71 |         assert engine.max_results == 5
   |                                      ^ PLR2004
72 |         assert engine.max_retries == 3
73 |         assert engine.delay_between_requests == 1.0
   |

tests/web/test_bing_scraper.py:72:38: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
70 |         assert engine.engine_code == "bing_scraper"
71 |         assert engine.max_results == 5
72 |         assert engine.max_retries == 3
   |                                      ^ PLR2004
73 |         assert engine.delay_between_requests == 1.0
74 |         # Lazy initialization - BingScraper shouldn't be called yet
   |

tests/web/test_bing_scraper.py:81:9: N803 Argument name `mock_BingScraper` should be lowercase
   |
79 |     async def test_search_basic(
80 |         self,
81 |         mock_BingScraper: MagicMock,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
82 |         engine: BingScraperSearchEngine,
83 |         mock_results: list[MockSearchResult],
   |

tests/web/test_bing_scraper.py:95:32: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
94 |         # Verify results
95 |         assert len(results) == 2
   |                                ^ PLR2004
96 |         assert isinstance(results[0], SearchResult)
97 |         assert results[0].title == "Test Result 1"
   |

tests/web/test_bing_scraper.py:110:44: N803 Argument name `mock_BingScraper` should be lowercase
    |
108 |     @patch("twat_search.web.engines.bing_scraper.BingScraper")
109 |     @pytest.mark.asyncio
110 |     async def test_custom_parameters(self, mock_BingScraper: MagicMock) -> None:
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
111 |         """Test custom parameters for engine initialization."""
112 |         # Create engine with custom parameters
    |

tests/web/test_bing_scraper.py:142:15: N803 Argument name `mock_BingScraper` should be lowercase
    |
140 |     @pytest.mark.asyncio
141 |     async def test_invalid_url_handling(
142 |         self, mock_BingScraper: MagicMock, engine: BingScraperSearchEngine
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
143 |     ) -> None:
144 |         """Test handling of invalid URLs."""
    |

tests/web/test_bing_scraper.py:203:46: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
201 |         assert call_args[0] == "test query"
202 |         assert call_kwargs["engines"] == ["bing_scraper"]
203 |         assert call_kwargs["num_results"] == 10
    |                                              ^^ PLR2004
204 |         assert call_kwargs["bing_scraper_max_retries"] == 5
205 |         assert call_kwargs["bing_scraper_delay_between_requests"] == 2.0
    |

tests/web/test_bing_scraper.py:204:59: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
202 |         assert call_kwargs["engines"] == ["bing_scraper"]
203 |         assert call_kwargs["num_results"] == 10
204 |         assert call_kwargs["bing_scraper_max_retries"] == 5
    |                                                           ^ PLR2004
205 |         assert call_kwargs["bing_scraper_delay_between_requests"] == 2.0
    |

tests/web/test_bing_scraper.py:205:70: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
    |
203 |         assert call_kwargs["num_results"] == 10
204 |         assert call_kwargs["bing_scraper_max_retries"] == 5
205 |         assert call_kwargs["bing_scraper_delay_between_requests"] == 2.0
    |                                                                      ^^^ PLR2004
206 |
207 |     @patch("twat_search.web.engines.bing_scraper.BingScraper")
    |

tests/web/test_bing_scraper.py:210:15: N803 Argument name `mock_BingScraper` should be lowercase
    |
208 |     @pytest.mark.asyncio
209 |     async def test_empty_query(
210 |         self, mock_BingScraper: MagicMock, engine: BingScraperSearchEngine
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
211 |     ) -> None:
212 |         """Test behavior with empty query string."""
    |

tests/web/test_bing_scraper.py:223:15: N803 Argument name `mock_BingScraper` should be lowercase
    |
221 |     @pytest.mark.asyncio
222 |     async def test_no_results(
223 |         self, mock_BingScraper: MagicMock, engine: BingScraperSearchEngine
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
224 |     ) -> None:
225 |         """Test handling of no results returned from BingScraper."""
    |

tests/web/test_bing_scraper.py:239:15: N803 Argument name `mock_BingScraper` should be lowercase
    |
237 |     @pytest.mark.asyncio
238 |     async def test_network_error(
239 |         self, mock_BingScraper: MagicMock, engine: BingScraperSearchEngine
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
240 |     ) -> None:
241 |         """Test handling of network errors."""
    |

tests/web/test_bing_scraper.py:256:15: N803 Argument name `mock_BingScraper` should be lowercase
    |
254 |     @pytest.mark.asyncio
255 |     async def test_parsing_error(
256 |         self, mock_BingScraper: MagicMock, engine: BingScraperSearchEngine
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
257 |     ) -> None:
258 |         """Test handling of parsing errors."""
    |

tests/web/test_bing_scraper.py:273:15: N803 Argument name `mock_BingScraper` should be lowercase
    |
271 |     @pytest.mark.asyncio
272 |     async def test_invalid_result_format(
273 |         self, mock_BingScraper: MagicMock, engine: BingScraperSearchEngine
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
274 |     ) -> None:
275 |         """Test handling of invalid result format."""
    |

Found 263 errors.

2025-02-26 14:47:06 - 37 files left unchanged

2025-02-26 14:47:06 - >>>Running type checks...
2025-02-26 14:47:20 - src/twat_search/web/engines/you.py:68: error: "type[YouBaseEngine]" has no attribute "num_results_param"  [attr-defined]
src/twat_search/web/engines/you.py:81: error: "type[YouBaseEngine]" has no attribute "num_results_param"  [attr-defined]
src/twat_search/web/engines/you.py:92: error: "type[YouBaseEngine]" has no attribute "base_url"  [attr-defined]
src/twat_search/web/engines/you.py:98: error: Returning Any from function declared to return "dict[Any, Any]"  [no-any-return]
src/twat_search/web/engines/you.py:132: error: "type[YouSearchEngine]" has no attribute "name"  [attr-defined]
src/twat_search/web/engines/you.py:141: error: "type[YouSearchEngine]" has no attribute "name"  [attr-defined]
src/twat_search/web/engines/you.py:174: error: "type[YouNewsSearchEngine]" has no attribute "name"  [attr-defined]
src/twat_search/web/engines/you.py:183: error: "type[YouNewsSearchEngine]" has no attribute "name"  [attr-defined]
src/twat_search/web/engines/tavily.py:82: error: Function is missing a type annotation  [no-untyped-def]
src/twat_search/web/engines/searchit.py:32: error: Cannot find implementation or library stub for module named "searchit"  [import-not-found]
src/twat_search/web/engines/searchit.py:39: error: Cannot find implementation or library stub for module named "searchit.scrapers.scraper"  [import-not-found]
src/twat_search/web/engines/google_scraper.py:26: error: Cannot find implementation or library stub for module named "googlesearch"  [import-not-found]
src/twat_search/web/engines/duckduckgo.py:16: error: Cannot find implementation or library stub for module named "duckduckgo_search"  [import-not-found]
src/twat_search/web/engines/brave.py:123: error: "BaseModel" has no attribute "description"  [attr-defined]
src/twat_search/web/engines/brave.py:133: error: "BaseModel" has no attribute "title"  [attr-defined]
src/twat_search/web/engines/brave.py:134: error: "BaseModel" has no attribute "url"  [attr-defined]
src/twat_search/web/engines/anywebsearch.py:33: error: Cannot find implementation or library stub for module named "anywebsearch"  [import-not-found]
src/twat_search/web/engines/anywebsearch.py:34: error: Cannot find implementation or library stub for module named "anywebsearch.tools"  [import-not-found]
src/twat_search/web/engines/anywebsearch.py:34: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
src/twat_search/web/engines/anywebsearch.py:80: error: Unused "type: ignore" comment  [unused-ignore]
tests/conftest.py:54: error: Only concrete class can be given where "type[SearchEngine]" is expected  [type-abstract]
tests/web/test_bing_scraper.py:282: error: Function is missing a return type annotation  [no-untyped-def]
tests/web/test_bing_scraper.py:282: note: Use "-> None" if function does not return a value
tests/unit/mock_engine.py:45: error: "MockSearchEngine" has no attribute "name"  [attr-defined]
tests/unit/web/test_api.py:61: error: "MockSearchEngine" has no attribute "name"  [attr-defined]
tests/unit/web/engines/test_base.py:33: error: "TestSearchEngine" has no attribute "name"  [attr-defined]
tests/unit/web/engines/test_base.py:77: error: "type[TestSearchEngine]" has no attribute "name"  [attr-defined]
tests/unit/web/engines/test_base.py:78: error: "type[DisabledTestSearchEngine]" has no attribute "name"  [attr-defined]
src/twat_search/web/cli.py:20: error: Skipping analyzing "fire": module is installed, but missing library stubs or py.typed marker  [import-untyped]
src/twat_search/web/cli.py:21: error: Skipping analyzing "fire.core": module is installed, but missing library stubs or py.typed marker  [import-untyped]
src/twat_search/__main__.py:77: error: Function is missing a type annotation  [no-untyped-def]
tests/test_twat_search.py:4: error: Function is missing a return type annotation  [no-untyped-def]
tests/test_twat_search.py:4: note: Use "-> None" if function does not return a value
Found 30 errors in 15 files (checked 38 source files)

2025-02-26 14:47:20 - >>> Running tests...
2025-02-26 14:47:22 - ============================= test session starts ==============================
platform darwin -- Python 3.12.8, pytest-8.3.4, pluggy-1.5.0 -- /Users/adam/Developer/vcs/github.twardoch/pub/twat-packages/_good/twat/plugins/repos/twat_search/.venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /Users/adam/Developer/vcs/github.twardoch/pub/twat-packages/_good/twat/plugins/repos/twat_search
configfile: pyproject.toml
plugins: cov-6.0.0, asyncio-0.25.3, anyio-4.8.0, benchmark-5.1.0, xdist-3.6.1
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None
collecting ... collected 49 items

tests/test_twat_search.py::test_version PASSED                           [  2%]
tests/unit/web/engines/test_base.py::test_search_engine_is_abstract PASSED [  4%]
tests/unit/web/engines/test_base.py::test_search_engine_name_class_var FAILED [  6%]
tests/unit/web/engines/test_base.py::test_engine_registration PASSED     [  8%]
tests/unit/web/engines/test_base.py::test_get_engine_with_invalid_name PASSED [ 10%]
tests/unit/web/engines/test_base.py::test_get_engine_with_disabled_engine PASSED [ 12%]
tests/unit/web/engines/test_base.py::test_get_engine_with_config PASSED  [ 14%]
tests/unit/web/engines/test_base.py::test_get_engine_with_kwargs PASSED  [ 16%]
tests/unit/web/test_api.py::test_search_with_mock_engine FAILED          [ 18%]
tests/unit/web/test_api.py::test_search_with_additional_params FAILED    [ 20%]
tests/unit/web/test_api.py::test_search_with_engine_specific_params FAILED [ 22%]
tests/unit/web/test_api.py::test_search_with_no_engines FAILED           [ 24%]
tests/unit/web/test_api.py::test_search_with_failing_engine PASSED       [ 26%]
tests/unit/web/test_api.py::test_search_with_nonexistent_engine PASSED   [ 28%]
tests/unit/web/test_api.py::test_search_with_disabled_engine PASSED      [ 30%]
tests/unit/web/test_config.py::test_engine_config_defaults PASSED        [ 32%]
tests/unit/web/test_config.py::test_engine_config_values PASSED          [ 34%]
tests/unit/web/test_config.py::test_config_defaults FAILED               [ 36%]
tests/unit/web/test_config.py::test_config_with_env_vars FAILED          [ 38%]
tests/unit/web/test_config.py::test_config_with_direct_initialization PASSED [ 40%]
tests/unit/web/test_config.py::test_config_env_vars_override_direct_config PASSED [ 42%]
tests/unit/web/test_exceptions.py::test_search_error PASSED              [ 44%]
tests/unit/web/test_exceptions.py::test_engine_error PASSED              [ 46%]
tests/unit/web/test_exceptions.py::test_engine_error_inheritance PASSED  [ 48%]
tests/unit/web/test_exceptions.py::test_search_error_as_base_class PASSED [ 51%]
tests/unit/web/test_models.py::test_search_result_valid_data PASSED      [ 53%]
tests/unit/web/test_models.py::test_search_result_with_optional_fields PASSED [ 55%]
tests/unit/web/test_models.py::test_search_result_invalid_url PASSED     [ 57%]
tests/unit/web/test_models.py::test_search_result_empty_fields PASSED    [ 59%]
tests/unit/web/test_models.py::test_search_result_serialization PASSED   [ 61%]
tests/unit/web/test_models.py::test_search_result_deserialization PASSED [ 63%]
tests/unit/web/test_utils.py::test_rate_limiter_init PASSED              [ 65%]
tests/unit/web/test_utils.py::test_rate_limiter_wait_when_not_needed PASSED [ 67%]
tests/unit/web/test_utils.py::test_rate_limiter_wait_when_needed PASSED  [ 69%]
tests/unit/web/test_utils.py::test_rate_limiter_cleans_old_timestamps PASSED [ 71%]
tests/unit/web/test_utils.py::test_rate_limiter_with_different_rates[1] PASSED [ 73%]
tests/unit/web/test_utils.py::test_rate_limiter_with_different_rates[5] PASSED [ 75%]
tests/unit/web/test_utils.py::test_rate_limiter_with_different_rates[10] PASSED [ 77%]
tests/unit/web/test_utils.py::test_rate_limiter_with_different_rates[100] PASSED [ 79%]
tests/web/test_bing_scraper.py::TestBingScraperEngine::test_init PASSED  [ 81%]
tests/web/test_bing_scraper.py::TestBingScraperEngine::test_search_basic PASSED [ 83%]
tests/web/test_bing_scraper.py::TestBingScraperEngine::test_custom_parameters PASSED [ 85%]
tests/web/test_bing_scraper.py::TestBingScraperEngine::test_invalid_url_handling PASSED [ 87%]
tests/web/test_bing_scraper.py::TestBingScraperEngine::test_bing_scraper_convenience_function PASSED [ 89%]
tests/web/test_bing_scraper.py::TestBingScraperEngine::test_empty_query PASSED [ 91%]
tests/web/test_bing_scraper.py::TestBingScraperEngine::test_no_results PASSED [ 93%]
tests/web/test_bing_scraper.py::TestBingScraperEngine::test_network_error PASSED [ 95%]
tests/web/test_bing_scraper.py::TestBingScraperEngine::test_parsing_error PASSED [ 97%]
tests/web/test_bing_scraper.py::TestBingScraperEngine::test_invalid_result_format PASSED [100%]

=================================== FAILURES ===================================
______________________ test_search_engine_name_class_var _______________________

    def test_search_engine_name_class_var() -> None:
        """Test that name is a required class variable."""
        # SearchEngine.name should be defined as a class variable
>       assert hasattr(SearchEngine, "name")
E       AssertionError: assert False
E        +  where False = hasattr(SearchEngine, 'name')

tests/unit/web/engines/test_base.py:71: AssertionError
_________________________ test_search_with_mock_engine _________________________

mock_config = Config(engines={'mock': EngineConfig(enabled=True, api_key='mock_key', default_params={'result_count': 2})})
setup_teardown = None

    @pytest.mark.asyncio
    async def test_search_with_mock_engine(
        mock_config: Config, setup_teardown: None
    ) -> None:
        """Test search with a mock engine."""
        results = await search("test query", engines=["mock"], config=mock_config)
    
>       assert len(results) == 2
E       assert 0 == 2
E        +  where 0 = len([])

tests/unit/web/test_api.py:103: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    twat_search.web.api:api.py:158 Search with engine 'mock' failed: 'MockSearchEngine' object has no attribute 'name'
______________________ test_search_with_additional_params ______________________

mock_config = Config(engines={'mock': EngineConfig(enabled=True, api_key='mock_key', default_params={'result_count': 2})})
setup_teardown = None

    @pytest.mark.asyncio
    async def test_search_with_additional_params(
        mock_config: Config, setup_teardown: None
    ) -> None:
        """Test search with additional parameters."""
        results = await search(
            "test query", engines=["mock"], config=mock_config, result_count=3
        )
    
>       assert len(results) == 3
E       assert 0 == 3
E        +  where 0 = len([])

tests/unit/web/test_api.py:118: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    twat_search.web.api:api.py:158 Search with engine 'mock' failed: 'MockSearchEngine' object has no attribute 'name'
___________________ test_search_with_engine_specific_params ____________________

mock_config = Config(engines={'mock': EngineConfig(enabled=True, api_key='mock_key', default_params={'result_count': 2})})
setup_teardown = None

    @pytest.mark.asyncio
    async def test_search_with_engine_specific_params(
        mock_config: Config, setup_teardown: None
    ) -> None:
        """Test search with engine-specific parameters."""
        results = await search(
            "test query", engines=["mock"], config=mock_config, mock_result_count=4
        )
    
>       assert len(results) == 4
E       assert 0 == 4
E        +  where 0 = len([])

tests/unit/web/test_api.py:130: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    twat_search.web.api:api.py:158 Search with engine 'mock' failed: 'MockSearchEngine' object has no attribute 'name'
_________________________ test_search_with_no_engines __________________________

setup_teardown = None

    @pytest.mark.asyncio
    async def test_search_with_no_engines(setup_teardown: None) -> None:
        """Test search with no engines specified raises SearchError."""
>       with pytest.raises(SearchError, match="No search engines configured"):
E       Failed: DID NOT RAISE <class 'twat_search.web.exceptions.SearchError'>

tests/unit/web/test_api.py:136: Failed
------------------------------ Captured log call -------------------------------
ERROR    twat_search.web.api:api.py:82 Error initializing engine 'brave': Engine 'brave': Brave API key is required. Set it via one of these env vars: BRAVE_API_KEY
ERROR    twat_search.web.api:api.py:82 Error initializing engine 'brave_news': Engine 'brave_news': Brave API key is required. Set it via one of these env vars: BRAVE_API_KEY
ERROR    twat_search.web.api:api.py:82 Error initializing engine 'google_serpapi': Engine 'google_serpapi': SerpApi API key is required. Set it via one of these env vars: SERPAPI_API_KEY
ERROR    twat_search.web.api:api.py:82 Error initializing engine 'tavily': Engine 'tavily': Tavily API key is required. Set it via one of these env vars: TAVILY_API_KEY
ERROR    twat_search.web.api:api.py:82 Error initializing engine 'pplx': Engine 'pplx': Perplexity API key is required. Set it via one of these env vars: PERPLEXITYAI_API_KEY, PERPLEXITY_API_KEY.
ERROR    twat_search.web.api:api.py:82 Error initializing engine 'you': Engine 'you': You.com API key is required. Set it via one of these env vars: YOU_API_KEY
ERROR    twat_search.web.api:api.py:82 Error initializing engine 'you_news': Engine 'you_news': You.com API key is required. Set it via one of these env vars: YOU_API_KEY
ERROR    twat_search.web.api:api.py:82 Error initializing engine 'critique': Engine 'critique': Critique Labs API key is required. Set it via one of these env vars: CRITIQUE_LABS_API_KEY, CRITIQUE_API_KEY
ERROR    twat_search.web.api:api.py:82 Error initializing engine 'duckduckgo': Unknown search engine: duckduckgo
ERROR    twat_search.web.api:api.py:82 Error initializing engine 'google_hasdata_full': Engine 'google_hasdata_full': HasData API key is required. Set it via one of these env vars: HASDATA_API_KEY
ERROR    twat_search.web.api:api.py:82 Error initializing engine 'google_hasdata': Engine 'google_hasdata': HasData API key is required. Set it via one of these env vars: HASDATA_API_KEY
ERROR    twat_search.web.api:api.py:158 Search with engine 'brave_anyws' failed: Engine 'brave_anyws': Brave API key is required for Brave search
ERROR    twat_search.web.api:api.py:158 Search with engine 'yandex_anyws' failed: Engine 'yandex_anyws': Yandex API key and folder ID are required for Yandex search
_____________________________ test_config_defaults _____________________________

isolate_env_vars = None

    def test_config_defaults(isolate_env_vars: None) -> None:
        """Test Config with default values."""
        config = Config()
    
        assert isinstance(config.engines, dict)
>       assert len(config.engines) == 0
E       AssertionError: assert 22 == 0
E        +  where 22 = len({'bing_anyws': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'num_results': 10, 'merge': True}), 'bing_scraper': EngineConfig(enabled=True, api_key=None, default_params={'num_pages': 1, 'delay': 0.5}), 'bing_searchit': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'domain': 'com', 'sleep_interval': 0, 'proxy': None}), 'brave': EngineConfig(enabled=True, api_key=None, default_params={'country': 'US', 'language': 'en-US', 'safe_search': True}), ...})
E        +    where {'bing_anyws': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'num_results': 10, 'merge': True}), 'bing_scraper': EngineConfig(enabled=True, api_key=None, default_params={'num_pages': 1, 'delay': 0.5}), 'bing_searchit': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'domain': 'com', 'sleep_interval': 0, 'proxy': None}), 'brave': EngineConfig(enabled=True, api_key=None, default_params={'country': 'US', 'language': 'en-US', 'safe_search': True}), ...} = Config(engines={'brave': EngineConfig(enabled=True, api_key=None, default_params={'country': 'US', 'language': 'en-US', 'safe_search': True}), 'brave_news': EngineConfig(enabled=True, api_key=None, default_params={'country': 'US', 'language': 'en-US', 'safe_search': True}), 'brave_anyws': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'num_results': 10, 'merge': True}), 'google_serpapi': EngineConfig(enabled=True, api_key=None, default_params={'country': 'us', 'language': 'en', 'safe_search': True}), 'google_anyws': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'num_results': 10, 'merge': True}), 'google_scraper': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'region': 'us', 'safe': 'active', 'sleep_interval': 0.0, 'ssl_verify': True, 'proxy': None, 'unique': True}), 'google_searchit': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'domain': 'com', 'sleep_interval': 0, 'proxy': None}), 'tavily': EngineConfig(enabled=True, api_key=None, default_params={'search_depth': 'basic', 'include_domains': None, 'exclude_domains': None, 'return_rank': True, 'max_tokens': None, 'a... 'duckduckgo': EngineConfig(enabled=True, api_key=None, default_params={'timeout': 10}), 'bing_scraper': EngineConfig(enabled=True, api_key=None, default_params={'num_pages': 1, 'delay': 0.5}), 'bing_anyws': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'num_results': 10, 'merge': True}), 'bing_searchit': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'domain': 'com', 'sleep_interval': 0, 'proxy': None}), 'qwant_anyws': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'num_results': 10, 'merge': True}), 'qwant_searchit': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'geo': 'us', 'sleep_interval': 0, 'proxy': None}), 'yandex_anyws': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'num_results': 10, 'merge': True}), 'yandex_searchit': EngineConfig(enabled=True, api_key=None, default_params={'language': 'en', 'country': 'us', 'sleep_interval': 0, 'proxy': None}), 'google_hasdata_full': EngineConfig(enabled=True, api_key=None, default_params={'device_type': 'desktop'}), 'google_hasdata': EngineConfig(enabled=True, api_key=None, default_params={})}).engines

tests/unit/web/test_config.py:42: AssertionError
__________________________ test_config_with_env_vars ___________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x102e99fd0>
env_vars_for_brave = None

    def test_config_with_env_vars(
        monkeypatch: MonkeyPatch, env_vars_for_brave: None
    ) -> None:
        """Test Config loads settings from environment variables."""
        # Create config
        config = Config()
    
        # Check the brave engine was configured
        assert "brave" in config.engines
        brave_config = config.engines["brave"]
        assert brave_config.api_key == "test_brave_key"
        assert brave_config.enabled is True
>       assert brave_config.default_params == {"count": 10}
E       AssertionError: assert {'count': 10,...search': True} == {'count': 10}
E         
E         Omitting 1 identical items, use -vv to show
E         Left contains 3 more items:
E         {'country': 'US', 'language': 'en-US', 'safe_search': True}
E         
E         Full diff:
E           {...
E         
E         ...Full output truncated (5 lines hidden), use '-vv' to show

tests/unit/web/test_config.py:57: AssertionError
=========================== short test summary info ============================
FAILED tests/unit/web/engines/test_base.py::test_search_engine_name_class_var
FAILED tests/unit/web/test_api.py::test_search_with_mock_engine - assert 0 == 2
FAILED tests/unit/web/test_api.py::test_search_with_additional_params - asser...
FAILED tests/unit/web/test_api.py::test_search_with_engine_specific_params - ...
FAILED tests/unit/web/test_api.py::test_search_with_no_engines - Failed: DID ...
FAILED tests/unit/web/test_config.py::test_config_defaults - AssertionError: ...
FAILED tests/unit/web/test_config.py::test_config_with_env_vars - AssertionEr...
========================= 7 failed, 42 passed in 1.00s =========================

2025-02-26 14:47:22 - All checks completed
2025-02-26 14:47:22 - 
=== TODO.md ===
2025-02-26 14:47:22 - # twat-search Web Package - Future Tasks

The basic implementation of the `twat-search` web package is complete.

Tip: Periodically run `./cleanup.py status` to see results of lints and tests.

## TODO

### Critical Issues

1. **Fix `num_results` parameter not being respected**
   - Currently, specifying `-n 1` or `--num_results=1` is ignored and engines fetch more results
   - Root cause: In `api.py`, the `num_results` param is passed to engine constructors, but many engines:
     - Override with their own defaults
     - Use different parameter names (`max_results`, `count`, etc.)
     - Have hardcoded minimums that override user preference
   - Fix:
     - Standardize parameter handling across all engines
     - Make sure constructors respect the passed `num_results` value
     - Update engine implementations to respect the limit even when calling external libraries

2. **Fix API key detection issues**
   - Multiple engines fail despite environment variables being set
   - Affected engines: `brave_anyws`, `brave_news`, `critique`, `google_serpapi`, `pplx`, `you`, `you_news`
   - Root cause: Likely incorrect environment variable loading or case sensitivity issues
   - Fix:
     - Debug environment variable loading in `config.py`
     - Add more logging to show which environment variables are detected/loaded
     - Ensure case sensitivity is handled correctly
     - Add explicit fallbacks for common API key name variations

3. **Fix failing scrapers with no results**
   - Several engines return no results: `bing_anyws`, `bing_searchit`, `google_anyws`, `google_searchit`, `qwant_anyws`, `qwant_searchit`
   - Root cause: Library-specific issues, timeouts, or blocking
   - Fix:
     - Add better error handling and diagnostics
     - Try using different timeouts, headers, or user agents
     - Improve robustness against temporary blocking
     - Implement circuit breakers for consistently failing engines

4. **Eliminate unexpected engine fallback behavior**
   - When a specified engine fails, the code sometimes falls back to other engines
   - This creates confusing output for users who expect specific engines
   - Fix:
     - Remove automatic fallback when a specific engine is requested
     - Only use fallbacks when no engine is explicitly specified
     - Add clear messages when specified engines fail

### Implementation Tasks

5. **Add comprehensive error handling**
   - Improve error messages to clearly indicate why an engine failed
   - Add more fine-grained error types that distinguish between:
     - API key issues
     - Network/connection problems
     - Rate limiting/blocking
     - Empty results (which may be legitimate)
   - Create a standard approach to logging that's consistent across engines

6. **Improve engine initialization process**
   - Create a more robust engine discovery and initialization process
   - Add capability tests for engines during initialization
   - Add a verbose debug mode that shows detailed initialization steps
   - Consider implementing a cache for engine availability status

7. **Standardize parameter handling**
   - Create consistent parameter names across all engines
   - Establish clear precedence rules for parameters:
     - Command line arguments
     - Environment variables
     - Config file defaults
   - Document each engine's parameter support and quirks

8. **Enhance testing and reliability**
   - Add automated tests for each engine
   - Create mock responses for offline testing
   - Implement retries with backoff for transient failures
   - Add circuit breaker patterns to fail fast for consistently failing engines

### User Experience Improvements

9. **Improve CLI usability**
   - Add clearer error messages for common issues
   - Improve help text with more examples
   - Add command to test an engine's configuration
   - Implement a "dry run" mode that validates settings without performing searches

10. **Enhance output formats**
    - Fix JSON mode to properly handle errors
    - Add more structured output formats (CSV, YAML, etc.)
    - Improve the default display format for better readability
    - Add highlighting options for search terms

11. **Add configuration workflow**
    - Create a command to guide users through setting up API keys
    - Add a validation command to check which engines are properly configured
    - Implement a configuration wizard for new users
    - Add configuration profiles for different use cases

### Engine-Specific Fixes

12. **Brave API fix**
    - Debug why `BRAVE_API_KEY` isn't being recognized
    - Add clearer error messaging specific to Brave setup

13. **Fix scrapers**
    - Troubleshoot each failing scraper individually
    - Consider alternative libraries or approaches for consistently failing scrapers
    - Add custom user agents and request headers for problematic engines

14. **API key management**
    - Improve how API keys are discovered and validated
    - Add a command to test API keys without performing a search
    - Consider secure local storage options for API keys
    - Add key rotation support for services with usage limits


2025-02-26 14:47:25 - 
📦 Repomix v0.2.29

No custom config found at repomix.config.json or global config at /Users/adam/.config/repomix/repomix.config.json.
You can add a config file for additional settings. Please check https://github.com/yamadashy/repomix for more information.
⠙ Collecting files...
[2K[1A[2K[G⠹ Collecting files...
[2K[1A[2K[G⠸ Collect file... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠼ Collect file... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠴ Collect file... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠦ Collect file... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠧ Collect file... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠇ Collect file... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠏ Collect file... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠋ Collect file... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠙ Collect file... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠹ Collect file... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠸ Collect file... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠼ Collect file... (6/55) .specstory/history.txt
[2K[1A[2K[G⠴ Running security check...
[2K[1A[2K[G⠦ Running security check... (5/55) .github/workflows/release.yml
[2K[1A[2K[G⠧ Running security check... (12/55) src/twat_search/web/engines/critique.py
[2K[1A[2K[G⠇ Processing files...
[2K[1A[2K[G⠏ Processing file... (6/54) src/twat_search/web/engines/__init__.py
[2K[1A[2K[G⠋ Processing file... (32/54) tests/unit/web/__init__.py
[2K[1A[2K[G⠙ Calculating metrics...
[2K[1A[2K[G⠹ Calculating metrics...
[2K[1A[2K[G⠸ Calculating metrics...
[2K[1A[2K[G⠼ Calculating metrics...
[2K[1A[2K[G⠴ Calculating metrics... (53/54) TODO.md
[2K[1A[2K[G✔ Packing completed successfully!

📈 Top 5 Files by Character Count and Token Count:
──────────────────────────────────────────────────
1.  NEXTENGINES.md (30,860 chars, 7,971 tokens)
2.  README.md (20,982 chars, 5,079 tokens)
3.  src/twat_search/web/cli.py (10,439 chars, 2,204 tokens)
4.  pyproject.toml (10,268 chars, 2,859 tokens)
5.  cleanup.py (5,901 chars, 1,308 tokens)

🔎 Security Check:
──────────────────
1 suspicious file(s) detected and excluded from the output:
1. .specstory/history.txt
   - found OpenAI API token: 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

These files have been excluded from the output for security reasons.
Please review these files for potential sensitive information.

📊 Pack Summary:
────────────────
  Total Files: 54 files
  Total Chars: 160,990 chars
 Total Tokens: 39,481 tokens
       Output: twat_search.txt
     Security: 1 suspicious file(s) detected and excluded

🎉 All Done!
Your repository has been successfully packed.

💡 Repomix is now available in your browser! Try it at https://repomix.com

2025-02-26 14:47:25 - Repository content mixed into twat_search.txt
