[build-system]
requires = [
    'hatchling>=1.27.0',
    'hatch-vcs>=0.4.0',
]
build-backend = 'hatchling.build'
[tool.hatch.build.targets.wheel]
packages = ['src/twat_search']
[tool.hatch.build.hooks.vcs]
version-file = 'src/twat_search/__version__.py'

[tool.hatch.version]
source = 'vcs'

[tool.hatch.version.raw-options]
version_scheme = 'post-release'
[tool.hatch.envs.default]
dependencies = [
    'pytest',
    'pytest-cov',
    'mypy>=1.15.0',
    'ruff>=0.9.6',
    'absolufy-imports>=0.3.1',
    'pre-commit>=4.1.0',
    'pyupgrade>=3',
    'isort>=6.0.0',
]

[tool.hatch.envs.default.scripts]
test = 'pytest {args:tests}'
test-cov = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/twat_search --cov=tests {args:tests}'
type-check = 'mypy src/twat_search tests'
lint = [
    'ruff check src/twat_search tests',
    'ruff format src/twat_search tests',
]
[[tool.hatch.envs.all.matrix]]
python = [
    '3.10',
    '3.11',
    '3.12',
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    'mypy>=1.15.0',
    'ruff>=0.9.6',
    'absolufy-imports>=0.3.1',
    'pre-commit>=4.1.0',
    'pyupgrade>=3',
    'isort>=6.0.0',
]

[tool.hatch.envs.lint.scripts]
typing = 'mypy --install-types --non-interactive {args:src/twat_search tests}'
style = [
    'ruff check {args:.}',
    'ruff format {args:.}',
]
fmt = [
    'ruff format {args:.}',
    'ruff check --fix {args:.}',
]
all = [
    'style',
    'typing',
]

[tool.hatch.envs.test]
dependencies = ['.[test]']

[tool.hatch.envs.test.scripts]
test = 'python -m pytest -n auto {args:tests}'
test-cov = 'python -m pytest -n auto --cov-report=term-missing --cov-config=pyproject.toml --cov=src/twat_search --cov=tests {args:tests}'
bench = 'python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only'
bench-save = 'python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only --benchmark-json=benchmark/results.json'

[tool.ruff]
target-version = 'py310'
line-length = 120

[tool.ruff.lint]
select = [
    'A',
    'ARG',
    'B',
    'C',
    'DTZ',
    'E',
    'EM',
    'F',
    'FBT',
    'I',
    'ICN',
    'ISC',
    'N',
    'PLC',
    'PLE',
    'PLR',
    'PLW',
    'Q',
    'RUF',
    'S',
    'T',
    'TID',
    'UP',
    'W',
    'YTT',
]
ignore = [
    'ARG001',
    'ARG002',
    'ARG004',
    'ARG005',
    'B904',
    'C901',
    'DTZ005',
    'E501',
    'F401',
    'F811',
    'FBT001',
    'FBT002',
    'FBT003',
    'I001',
    'ISC001',
    'N803',
    'PLR0911',
    'PLR0912',
    'PLR0913',
    'PLR0915',
    'PLR2004',
    'S311',
    'S603',
    'S607',
    'T201',
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ['S101']

[tool.mypy]
python_version = '3.10'
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
[tool.coverage.run]
source_pkgs = [
    'twat_search',
    'tests',
]
branch = true
parallel = true
omit = ['src/twat_search/__about__.py']

[tool.coverage.paths]
twat_search = [
    'src/twat_search',
    '*/twat-search/src/twat_search',
]
tests = [
    'tests',
    '*/twat-search/tests',
]

[tool.coverage.report]
exclude_lines = [
    'no cov',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
]
[tool.pytest.ini_options]
markers = ['''benchmark: marks tests as benchmarks (select with '-m benchmark')''']
addopts = '-v -p no:briefcase'
testpaths = ['tests']
python_files = ['test_*.py']
filterwarnings = [
    'ignore::DeprecationWarning',
    'ignore::UserWarning',
]
asyncio_mode = 'auto'

[tool.pytest-benchmark]
min_rounds = 100
min_time = 0.1
histogram = true
storage = 'file'
save-data = true
compare = [
    'min',
    'max',
    'mean',
    'stddev',
    'median',
    'iqr',
    'ops',
    'rounds',
]

[project]
name = 'twat-search'
dynamic = ['version']
description = 'Advanced search utilities and tools for the twat ecosystem'
readme = 'README.md'
requires-python = '>=3.10'
license = 'MIT'
keywords = [
    'twat',
    'search',
    'utilities',
    'text-search',
    'indexing',
]
classifiers = [
    'Development Status :: 4 - Beta',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: Implementation :: CPython',
    'Programming Language :: Python :: Implementation :: PyPy',
]
dependencies = [
    'twat>=1.8.1',
    'pydantic>=2.10.6',
    'pydantic-settings>=2.8.0',
    'httpx>=0.28.1',
    'python-dotenv>=1.0.1',
    'fire>=0.5.0',
    'rich>=13.6.0',
    'requests>=2.31.0',
]

[[project.authors]]
name = 'Adam Twardoch'
email = 'adam+github@twardoch.com'

[project.urls]
Documentation = 'https://github.com/twardoch/twat-search#readme'
Issues = 'https://github.com/twardoch/twat-search/issues'
Source = 'https://github.com/twardoch/twat-search'
[project.entry-points."twat.plugins"]
search = 'twat_search'

[project.optional-dependencies]
test = [
    'pytest>=8.3.4',
    'pytest-cov>=6.0.0',
    'pytest-xdist>=3.6.1',
    'pytest-benchmark[histogram]>=5.1.0',
    'pytest-asyncio>=0.25.3',
]
dev = [
    'pre-commit>=4.1.0',
    'ruff>=0.9.6',
    'mypy>=1.15.0',
    'absolufy-imports>=0.3.1',
    'pyupgrade>=3',
    'isort>=6.0.0',
]
brave = []
duckduckgo = ['duckduckgo-search>=7.5.0']
bing_scraper = ['scrape-bing>=0.1.2.1']
tavily = ['tavily-python>=0.5.0']
pplx = []
serpapi = ['serpapi>=0.1.5']
hasdata = []
google_scraper = ['googlesearch-python>=1.3.0']
searchit = ['searchit']
all = [
    'twat',
    'duckduckgo-search>=7.5.0',
    'scrape-bing>=0.1.2.1',
    'tavily-python>=0.5.0',
    'serpapi>=0.1.5',
    'googlesearch-python>=1.3.0',
    'searchit',
    'requests>=2.31.0',
]

[project.scripts]
twat-search = 'twat_search.__main__:main'
twat-search-web = 'twat_search.web.cli:main'
